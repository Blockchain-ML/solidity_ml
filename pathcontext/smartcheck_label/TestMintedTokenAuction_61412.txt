C:\Users\hp\DataSet\TestMintedTokenAuction.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 114
column: 4
content: for(i=0;i<expectedPricePoints.length;i++){tokenPricePoints.push(instance.tokenPricePoints(i));}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 114
column: 4
content: for(i=0;i<expectedPricePoints.length;i++){tokenPricePoints.push(instance.tokenPricePoints(i));}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 44
column: 2
content: function()payable{}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 46
column: 2
content: functionbeforeAll(){testToken=newStandardToken();uint256d=1499886309;uint256_price;uint256depositValue;instance=newMintedTokenAuctionTest(testToken,1000000,500000,10000000000000000000,10000000000000000,1000000000000000,1000000000000000,d);for(uint256z=1;z<11;z++){depositValue=75000000000000000000;_price=z*(10**15);instance.deposit.value(depositValue)(_price,testTime);}instanceOverSubscribed=newMintedTokenAuctionTest(testToken,1000000,500000,10000000000000000000,10000000000000000,1000000000000000,1000000000000000,d);for(uint256i=0;i<2;i++){for(z=1;z<11;z++){if(z==7&&i==1)depositValue=9900000000000000000000;elsedepositValue=100000000000000000000;_price=z*(10**15);instanceOverSubscribed.deposit.value(depositValue)(_price,testTime);}}instanceUnderSubscribed=newMintedTokenAuctionTest(testToken,1000000,500000,10000000000000000000,10000000000000000,1000000000000000,1000000000000000,d);for(z=1;z<11;z++){depositValue=40000000000000000000;_price=z*(10**15);instanceUnderSubscribed.deposit.value(depositValue)(_price,testTime);}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 103
column: 2
content: functiontestInputConditions(){uint256i;uint256_minimumTokensToSell=instance.minimumTokensToSell();uint256_minimumBid=instance.minimumBid();uint256_highTokenPrice=10000000000000000;uint256_lowTokenPrice=1000000000000000;uint256_priceIncrement=1000000000000000;uint256_decimals=instance.decimals();for(i=_lowTokenPrice;i<=_highTokenPrice;i+=_priceIncrement){expectedPricePoints.push(i);}for(i=0;i<expectedPricePoints.length;i++){tokenPricePoints.push(instance.tokenPricePoints(i));}uint256_percentAuctioned=instance.percentOfTokensAuctioned();Assert.equal(_minimumTokensToSell,500000,"The minimum tokens is 500,000");Assert.equal(_minimumBid,10000000000000000000,"The minimum bid should be 10 ether");Assert.equal(tokenPricePoints,expectedPricePoints,"The price point array should be calculated from 1 finney to 10 finney in 1 finney increments");Assert.equal(_decimals,18,"The contract should store the decimals from the StandardToken contract");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 125
column: 2
content: functiontestDepositFunctionTime(){uint256_testTime=1499886209;bResult=instance.deposit.value(deposit)(price,_testTime);Assert.isFalse(bResult,"Deposit should be rejected prior to auction start");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 132
column: 2
content: functiontestDepositFunctionBadPrice(){uint256_price=200000000000000;bResult=instance.deposit.value(deposit)(_price,testTime);uint256balance=this.balance;uint256failedDeposit=instance.failedDeposit(this);instance.getFailedDeposit();uint256newBalance=this.balance;Assert.isFalse(bResult,"Deposit should be rejected if requested token price not listed");Assert.equal(newBalance-balance,deposit,"Failed deposit should be available and returned through getFailedDeposit()");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 145
column: 2
content: functiontestDepositFunctionBelowMin(){uint256_deposit=1000000000000000000;bResult=instance.deposit.value(_deposit)(price,testTime);Assert.isFalse(bResult,"Deposit should be rejected if below minimum bid");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 152
column: 2
content: functiontestDepositFunctionAccepted(){addressbidder;uint256totalBid;bResult=instance.deposit.value(deposit)(price,testTime);uint256priceLocation=instance.bidLocation(this,0);uint256indexLocation=instance.bidLocation(this,1);(bidder,totalBid)=instance.bids(priceLocation,indexLocation);Assert.isTrue(bResult,"Function should return true if deposit accepted");Assert.equal(totalBid,deposit,"Deposit should be recorded in bids, bid location in bidLocation");Assert.equal(bidder,this,"Bidder should be recorded in bids with deposit");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 166
column: 2
content: functiontestProcessAuctionTooEarly(){bResult=instance.processAuction(seed,testTime);Assert.isFalse(bResult,"Function should return false if processAuction is called before auction end");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 172
column: 2
content: functiontestFundTokensTooEarly(){bResult=instance.fundTokens();Assert.isFalse(bResult,"Function should return false because tokens have not been generated");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 178
column: 2
content: functiontestProcessAuction(){uint256_testTime=testTime+2592060;instance.processAuction(seed,_testTime);uint256bestPrice=instance.bestPrice();uint256bpIndex=instance.bpIndex();boolfundAll=instance.fundAll();uint256numberOfBytes=instance.numberOfBytes();uint256byteDivisor=instance.byteDivisor();Assert.equal(bestPrice,expectedPrice,"Best price should be lowest price when auction is not over subscribed");Assert.equal(bpIndex,expectedIndex,"The index of the best price should be the index of 1 finney");Assert.isTrue(fundAll,"The tokens should be provided to all bidders");Assert.equal(numberOfBytes,0,"No random(ish) generator necessary for this auction");Assert.equal(byteDivisor,0,"No random(ish) generator necessary for this auction");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 194
column: 2
content: functiontestProcessAuctionOverSubscribe(){uint256_testTime=testTime+2592060;instanceOverSubscribed.processAuction(seed,_testTime);uint256bestPrice=instanceOverSubscribed.bestPrice();uint256bpIndex=instanceOverSubscribed.bpIndex();boolfundAll=instanceOverSubscribed.fundAll();uint256numberOfBytes=instanceOverSubscribed.numberOfBytes();uint256byteDivisor=instanceOverSubscribed.byteDivisor();Assert.equal(bestPrice,7000000000000000,"Best price should be 7 finney");Assert.equal(bpIndex,6,"The index of the best price should be the index of 7 finney");Assert.isFalse(fundAll,"Not everyone receives tokens when auction is oversubscribed");Assert.equal(numberOfBytes,1,"The generator should use 1 byte for 8 possible bids");Assert.equal(byteDivisor,32,"The generated byte should be divided by 32 for 8 possible bids");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 210
column: 2
content: functiontestProcessAuctionUnderFunded(){uint256_testTime=testTime+2592060;instanceUnderSubscribed.processAuction(seed,_testTime);for(uinti=0;i<10;i++){bResult=instanceUnderSubscribed.allowWithdraw(i);Assert.isTrue(bResult,"All funds should be released if auction is underfunded");}uint256bestPrice=instanceUnderSubscribed.bestPrice();Assert.equal(bestPrice,0,"bestPrice should not be set if auction underfunded");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 223
column: 2
content: functiontestAllowWithdrawForLowBidders(){for(uinti=0;i<6;i++){bResult=instanceOverSubscribed.allowWithdraw(i);Assert.isTrue(bResult,"Funds for inelligible low bidders should be released when oversubcribed, 6 finney and lower for this test");}for(i=6;i<10;i++){bResult=instanceOverSubscribed.allowWithdraw(i);Assert.isFalse(bResult,"Funds for elligible bidders should be held until tokens funded");}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 235
column: 2
content: functiontestFundTokens(){bResult=instance.fundTokens();boolallowRes;for(uinti=0;i<10;i++){allowRes=instance.allowWithdraw(i);Assert.isTrue(allowRes,"All funds should be released after funding tokens");}Assert.isTrue(bResult,"The fund tokens function should return true");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 246
column: 2
content: functiontestFundTokensOverSubscribe(){bResult=instanceOverSubscribed.fundTokens();uint256auctionSupply=instanceOverSubscribed.auctionSupply();boolallowRes;for(uinti=0;i<10;i++){allowRes=instanceOverSubscribed.allowWithdraw(i);Assert.isTrue(allowRes,"All funds should be released after funding tokens");}Assert.isTrue(bResult,"The fund tokens function should return true");Assert.equal(auctionSupply,0,"The token supply should be depleted after funding tokens");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 260
column: 2
content: functiontestWithdrawTokens(){uint256tokensAvail=instance.withdrawTokensMap(this);instance.withdrawTokens();uint256tokensAfter=instance.withdrawTokensMap(this);uint256tokenBalance=testToken.balanceOf(this);Assert.equal(tokensAvail,expectedTokensAvail,"All tokens should be in the withdraw map");Assert.equal(tokensAfter,0,"The withdrawTokens function should reduce the withdraw map to 0");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 271
column: 2
content: functiontestWithdrawDeposit(){addressbidder;uint256beforeDeposit;uint256afterDeposit;uint256_price=instanceOverSubscribed.bidLocation(this,0);uint256_index=instanceOverSubscribed.bidLocation(this,1);uint256beforeBalance=this.balance;(bidder,beforeDeposit)=instanceOverSubscribed.bids(_price,_index);instanceOverSubscribed.withdrawDeposit(testTime);uint256afterBalance=this.balance;(bidder,afterDeposit)=instanceOverSubscribed.bids(_price,_index);Assert.equal(afterBalance,beforeBalance+beforeDeposit,"The withdrawDeposit function should return the balance to the bidder");Assert.equal(afterDeposit,0,"There should be no deposit remaining after calling the withdrawDeposit function");}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 12
column: 2
content: MintedTokenAuctionTestinstance;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 13
column: 2
content: MintedTokenAuctionTestinstanceUnderSubscribed;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 14
column: 2
content: MintedTokenAuctionTestinstanceOverSubscribed;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 15
column: 2
content: MintedTokenAuctiontestConstruct;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 16
column: 2
content: StandardTokentestToken;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 17
column: 2
content: uint256[]expectedPricePoints;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 18
column: 2
content: uint256[]tokenPricePoints;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 19
column: 2
content: boolbResult;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 20
column: 2
content: uintexpected;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 21
column: 2
content: uintresult;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 24
column: 2
content: uint256deposit=10000000000000000000;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 26
column: 2
content: uint256price=2000000000000000;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 28
column: 2
content: uint256testTime=1499886409;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 30
column: 2
content: stringseed="Seed";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 32
column: 2
content: uint256expectedPrice=1000000000000000;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 34
column: 2
content: uint256expectedIndex=0;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 36
column: 2
content: uint256expectedAuctionSupply=1000000000000000000000000;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 38
column: 2
content: uint256expectedBytes=0;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 39
column: 2
content: uint256expectedDivisor=0;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 42
column: 2
content: uint256expectedTokensAvail=760000000000000000000000;

SOLIDITY_VISIBILITY :37
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_GAS_LIMIT_IN_LOOPS :1
