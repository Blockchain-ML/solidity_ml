C:\Users\hp\DataSet\TransferWithSigPredicate.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 22
column: 49
content: 0x19d27d9c

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 16
column: 0
content: contractTransferWithSigPredicateisPredicateUtils{usingRLPReaderforbytes;usingRLPReaderforRLPReader.RLPItem;usingSafeMathforuint256;bytes4constantTRANSFER_WITH_SIG_FUNC_SIG=0x19d27d9c;Registrypublicregistry;IRootChainpublicrootChain;structReferenceTxData{uint256closingBalance;uint256age;addresschildToken;addressrootToken;}structExitTxData{uint256amountOrToken;bytes32txHash;addresschildToken;addresssigner;}constructor(address_rootChain,address_withdrawManager,address_registry)public{withdrawManager=IWithdrawManager(_withdrawManager);rootChain=IRootChain(_rootChain);registry=Registry(_registry);}functionstartExitForOutgoingErc20Transfer(bytescalldatadata,bytescalldataexitTx)externalpayableisBondProvided{RLPReader.RLPItem[]memoryreferenceTx=data.toRlpItem().toList();bytesmemorypreState=referenceTx[0].toBytes();(ExitTxDatamemoryexitTxData,uint256expiration)=processExitTx(exitTx);require(expiration>rootChain.getLastChildBlock(),"The inflight exit is not valid, because the transfer sig has expired");require(exitTxData.signer==msg.sender,"Should be an outgoing transfer");addresserc20Predicate=registry.erc20Predicate();ReferenceTxDatamemoryreferenceTxData=processLogTransferReceipt(erc20Predicate,preState,msg.sender,true,false);require(exitTxData.childToken==referenceTxData.childToken,"Reference and exit tx do not correspond to the same child token");require(referenceTxData.closingBalance>=exitTxData.amountOrToken,"Exiting with more tokens than referenced");sendBond();uint256exitId=referenceTxData.age<<1;exitId|=1;withdrawManager.addExitToQueue(msg.sender,referenceTxData.childToken,referenceTxData.rootToken,referenceTxData.closingBalance.sub(exitTxData.amountOrToken),exitTxData.txHash,false,exitId);withdrawManager.addInput(exitId,referenceTxData.age,msg.sender,referenceTxData.rootToken);}functionstartExitForIncomingErc20Transfer(bytescalldatadata,bytescalldataexitTx)externalpayableisBondProvided{RLPReader.RLPItem[]memoryreferenceTx=data.toRlpItem().toList();bytesmemorypreState=referenceTx[0].toBytes();(ExitTxDatamemoryexitTxData,uint256expiration)=processExitTx(exitTx);require(expiration>rootChain.getLastChildBlock(),"The inflight exit is not valid, because the transfer sig has expired");require(exitTxData.signer!=msg.sender,"Should be an incoming transfer");addresserc20Predicate=registry.erc20Predicate();ReferenceTxDatamemoryreferenceTxData=processLogTransferReceipt(erc20Predicate,preState,exitTxData.signer,true,false);require(exitTxData.childToken==referenceTxData.childToken,"Reference and exit tx do not correspond to the same child token");require(referenceTxData.closingBalance>=exitTxData.amountOrToken,"Exiting with more tokens than referenced");ReferenceTxDatamemory_referenceTxData;if(referenceTx.length>1){preState=referenceTx[1].toBytes();_referenceTxData=processLogTransferReceipt(erc20Predicate,preState,msg.sender,true,false);require(_referenceTxData.childToken==referenceTxData.childToken,"child tokens in the referenced txs do not match");require(_referenceTxData.rootToken==referenceTxData.rootToken,"root tokens in the referenced txs do not match");}sendBond();uint256exitId=Math.max(referenceTxData.age,_referenceTxData.age)<<1;withdrawManager.addExitToQueue(msg.sender,referenceTxData.childToken,referenceTxData.rootToken,exitTxData.amountOrToken.add(_referenceTxData.closingBalance),exitTxData.txHash,false,exitId);withdrawManager.addInput(exitId,referenceTxData.age,exitTxData.signer,referenceTxData.rootToken);withdrawManager.addInput(exitId,_referenceTxData.age,msg.sender,referenceTxData.rootToken);}functionverifyDeprecation(bytescalldataexit,bytescalldata<missing ')'>inputUtxo,bytescalldatachallengeData)externalviewreturns<missing ';'>(bool){PlasmaExitmemory_exit=decodeExit(exit);(uint256<missing ')'>age,addressutxoOwner,addresspredicate,addresschildToken)=decodeInputUtxo(inputUtxo);RLPReader.RLPItem[]memory_challengeData=challengeData.toRlpItem().toList();(ExitTxDatamemorychallengeTxData,uint256expiration)=processExitTx(_challengeData[10].toBytes());require(challengeTxData.signer==utxoOwner,"utxoOwner is not transferWithSig signer");ReferenceTxDatamemoryreferenceTxData=processLogTransferReceipt(predicate,challengeData,utxoOwner,true,true);if(registry.predicates<missing ';'>(predicate)==Registry.Type.ERC721){require(referenceTxData.closingBalance==_exit.receiptAmountOrNFTId&&challengeTxData.amountOrToken==_exit.receiptAmountOrNFTId,"LogTransferReceipt, challengeTx NFT and challenged utxo NFT do not match");}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 19
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 100
column: 8
content: sendBond()

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 198
column: 8
content: sendBond()

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 246
column: 4
content: functionverifyDeprecation(bytescalldataexit,bytescalldata<missing ')'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 22
column: 4
content: bytes4constantTRANSFER_WITH_SIG_FUNC_SIG=0x19d27d9c;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 248
column: 23
content: inputUtxo,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 249
column: 8
content: bytescalldata

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 250
column: 28
content: (bool){PlasmaExitmemory

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 251
column: 26
content: _exit=decodeExit

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 251
column: 44
content: (exit);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 252
column: 8
content: (uint256<missing ')'>age,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 252
column: 22
content: addressutxoOwner,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 252
column: 41
content: addresspredicate,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 252
column: 60
content: addresschildToken)=decodeInputUtxo(inputUtxo);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 256
column: 8
content: RLPReader.RLPItem[]memory_challengeData=challengeData.toRlpItem().toList();

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 259
column: 8
content: (ExitTxDatamemorychallengeTxData,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 259
column: 44
content: uint256expiration)=processExitTx(_challengeData[10].toBytes());

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 262
column: 8
content: require(challengeTxData.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 263
column: 28
content: signer==utxoOwner,"utxoOwner is not transferWithSig signer");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 269
column: 8
content: ReferenceTxDatamemoryreferenceTxData=processLogTransferReceipt(predicate,challengeData,utxoOwner,true,true);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 277
column: 11
content: (registry.predicates<missing ';'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 277
column: 31
content: (predicate)==Registry.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 277
column: 55
content: Type.ERC721){

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 278
column: 12
content: require(referenceTxData.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 279
column: 32
content: closingBalance==_exit.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 279
column: 56
content: receiptAmountOrNFTId&&challengeTxData.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 280
column: 36
content: amountOrToken==_exit.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 280
column: 59
content: receiptAmountOrNFTId,"LogTransferReceipt, challengeTx NFT and challenged utxo NFT do not match");

SOLIDITY_VISIBILITY :25
SOLIDITY_SAFEMATH :1
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_ADDRESS_HARDCODED :1
SOLIDITY_UNCHECKED_CALL :2
