C:\Users\hp\DataSet\contracts\ropsten\63\636254ee409bafae12bd7c7d4898f97cd4289cbc_TokenLoot.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 103
column: 4
content: for(uint256i=0;i<_tokens.length;i++){tokens[i]=_tokens[i];}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 111
column: 4
content: for(uint256i=0;i<_tokens.length;i++){tokens.push(_tokens[i]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 135
column: 4
content: for(uint256i=0;i<_amounts.length;i++){if(_amounts[i]>0){assert(ERC20(tokens[i]).transfer(msg.sender,_amounts[i]));}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 153
column: 4
content: for(uint256i=0;i<tokens.length;i++){uint256amount=ERC20(tokens[i]).balanceOf(this);if(amount>0)ERC20(tokens[i]).transfer(msg.sender,amount);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 103
column: 4
content: for(uint256i=0;i<_tokens.length;i++){tokens[i]=_tokens[i];}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 111
column: 4
content: for(uint256i=0;i<_tokens.length;i++){tokens.push(_tokens[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 135
column: 4
content: for(uint256i=0;i<_amounts.length;i++){if(_amounts[i]>0){assert(ERC20(tokens[i]).transfer(msg.sender,_amounts[i]));}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 153
column: 4
content: for(uint256i=0;i<tokens.length;i++){uint256amount=ERC20(tokens[i]).balanceOf(this);if(amount>0)ERC20(tokens[i]).transfer(msg.sender,amount);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 98
column: 2
content: functionsetNeverdieSignerAddress(address_to)publiconlyOwner{neverdieSigner=_to;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 102
column: 2
content: functionsetTokens(address[]_tokens)publiconlyOwner{for(uint256i=0;i<_tokens.length;i++){tokens[i]=_tokens[i];}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_REDUNDANT_FALLBACK_REJECT
patternId: b85a32
severity: 1
line: 147
column: 29
content: {revert();}

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 128
column: 31
content: keccak256(msg.sender,_nonce,_amounts)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 91h3sa
severity: 1
line: 147
column: 22
content: public

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 102
column: 21
content: address[]_tokens

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 110
column: 2
content: constructor(address[]_tokens,address_signer){for(uint256i=0;i<_tokens.length;i++){tokens.push(_tokens[i]);}neverdieSigner=_signer;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 117
column: 2
content: functionreceiveTokenLoot(uint256[]_amounts,uint256_nonce,uint8_v,bytes32_r,bytes32_s){require(_nonce>nonces[msg.sender]);nonces[msg.sender]=_nonce;addresssigner=ecrecover(keccak256(msg.sender,_nonce,_amounts),_v,_r,_s);require(signer==neverdieSigner);for(uint256i=0;i<_amounts.length;i++){if(_amounts[i]>0){assert(ERC20(tokens[i]).transfer(msg.sender,_amounts[i]));}}ReceiveLoot(msg.sender,_nonce,tokens,_amounts);}

SOLIDITY_VISIBILITY :2
SOLIDITY_OVERPOWERED_ROLE :2
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :4
SOLIDITY_UPGRADE_TO_050 :3
SOLIDITY_GAS_LIMIT_IN_LOOPS :4
SOLIDITY_REDUNDANT_FALLBACK_REJECT :1
