C:\Users\hp\DataSet\contracts\ropsten\39\39f025afeae72232e0f89094ae48518489fca3ca_RootChain.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 242
column: 46
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 243
column: 45
content: 0xB8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 244
column: 46
content: 0xC0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 245
column: 45
content: 0xF8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 247
column: 46
content: 0xB7

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 248
column: 46
content: 0xF7

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 98
column: 12
content: returnaddress(0)

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 115
column: 12
content: returnaddress(0)

ruleId: SOLIDITY_ARRAY_LENGTH_MANIPULATION
patternId: 872bdd
severity: 1
line: 1364
column: 8
content: heapList.length=heapList.length.sub(1)

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 57
column: 8
content: for(uint256i=32;i<=_proof.length;i+=32){assembly{proofElement:=mload(add(_proof,i))}if(_index%2==0){computedHash=keccak256(abi.encodePacked(computedHash,proofElement));}else{computedHash=keccak256(abi.encodePacked(proofElement,computedHash));}index=index/2;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 991
column: 8
content: for(uintj=0;j<res.length;j++){res[j]=b[i++];}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1033
column: 8
content: for(uinti=0;i<self.length;i++){len+=self[i].length;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1041
column: 8
content: for(i=0;i<self.length;i++){bytesmemoryitem=self[i];uintselfPtr;assembly{selfPtr:=add(item,0x20)}memcpy(flattenedPtr,selfPtr,item.length);flattenedPtr+=self[i].length;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1236
column: 8
content: for(uint256offset=0;offset<_signatures.length;offset+=65){bytesmemorysignature=ByteUtils.slice(_signatures,offset,65);bytesmemoryconfirmationSigature=ByteUtils.slice(_confirmationSignatures,offset,65);bytes32confirmationHash=keccak256(abi.encodePacked(_txHash));if(ECRecovery.recover(_txHash,signature)!=ECRecovery.recover(confirmationHash,confirmationSigature)){returnfalse;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1663
column: 8
content: for(uint8i=0;i<transaction.inputs.length;i++){if(exitingUtxoPosition==PlasmaUtils.getInputPosition(transaction.inputs[i])){spendsExitingUtxo=true;break;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 1397
column: 8
content: while(newVal<heapList[index.div(2)]){heapList[index]=heapList[index.div(2)];index=index.div(2);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 1412
column: 8
content: while(mc<=currentSize&&newVal>heapList[mc]){heapList[index]=heapList[mc];index=mc;mc=_minChild(index);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 1688
column: 8
content: while(exitQueue.currentSize()>0){(exitableAt,utxoPosition)=exitQueue.getMin();if(exitableAt>block.timestamp){return;}PlasmaExitmemorycurrentExit=plasmaExits[utxoPosition];if(currentExit.isValid){require(token.transfer(currentExit.owner,currentExit.amount));deleteplasmaExits[utxoPosition].owner;}exitQueue.delMin();}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 519
column: 4
content: functiontoUint(RLPItemmemoryself)internalpurereturns(uintdata){if(!isData(self)){revert();}uintrStartPos;uintlen;(rStartPos,len)=_decode(self);if(len>32){revert();}assembly{data:=div(mload(rStartPos),exp(256,sub(32,len)))}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 624
column: 4
content: functiontoAddress(RLPItemmemoryself)internalpurereturns(addressdata){if(!isData(self)){revert();}uintrStartPos;uintlen;(rStartPos,len)=_decode(self);if(len!=20){revert();}assembly{data:=div(mload(rStartPos),exp(256,12))}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 991
column: 8
content: for(uintj=0;j<res.length;j++){res[j]=b[i++];}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1033
column: 8
content: for(uinti=0;i<self.length;i++){len+=self[i].length;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1041
column: 8
content: for(i=0;i<self.length;i++){bytesmemoryitem=self[i];uintselfPtr;assembly{selfPtr:=add(item,0x20)}memcpy(flattenedPtr,selfPtr,item.length);flattenedPtr+=self[i].length;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1236
column: 8
content: for(uint256offset=0;offset<_signatures.length;offset+=65){bytesmemorysignature=ByteUtils.slice(_signatures,offset,65);bytesmemoryconfirmationSigature=ByteUtils.slice(_confirmationSignatures,offset,65);bytes32confirmationHash=keccak256(abi.encodePacked(_txHash));if(ECRecovery.recover(_txHash,signature)!=ECRecovery.recover(confirmationHash,confirmationSigature)){returnfalse;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1663
column: 8
content: for(uint8i=0;i<transaction.inputs.length;i++){if(exitingUtxoPosition==PlasmaUtils.getInputPosition(transaction.inputs[i])){spendsExitingUtxo=true;break;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 406
column: 15
content: pos<=last

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 1412
column: 15
content: mc<=currentSize&&newVal>heapList[mc]

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 38f6c7
severity: 2
line: 487
column: 8
content: while(_hasNext(it)){list[idx]=_next(it);idx++;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 38f6c7
severity: 2
line: 1397
column: 8
content: while(newVal<heapList[index.div(2)]){heapList[index]=heapList[index.div(2)];index=index.div(2);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 38f6c7
severity: 2
line: 1688
column: 8
content: while(exitQueue.currentSize()>0){(exitableAt,utxoPosition)=exitQueue.getMin();if(exitableAt>block.timestamp){return;}PlasmaExitmemorycurrentExit=plasmaExits[utxoPosition];if(currentExit.isValid){require(token.transfer(currentExit.owner,currentExit.amount));deleteplasmaExits[utxoPosition].owner;}exitQueue.delMin();}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 300
column: 12
content: if(_payloadOffset(item)>len){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 303
column: 12
content: if(_itemLength(item._unsafe_memPtr)!=len){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 306
column: 12
content: if(!_validate(item)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 423
column: 8
content: if(!isList(self)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 459
column: 8
content: if(!isData(self)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 480
column: 8
content: if(!isList(self)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 503
column: 8
content: if(!isData(self)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 524
column: 8
content: if(!isData(self)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 530
column: 8
content: if(len>32){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 548
column: 8
content: if(!isData(self)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 554
column: 8
content: if(len!=1){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 561
column: 8
content: if(temp>1){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 577
column: 8
content: if(!isData(self)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 583
column: 8
content: if(len!=1){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 629
column: 8
content: if(!isData(self)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 635
column: 8
content: if(len!=20){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 658
column: 8
content: if(_hasNext(self)){uintptr=self._unsafe_nextPtr;uintitemLength=_itemLength(ptr);subItem._unsafe_memPtr=ptr;subItem._unsafe_length=itemLength;self._unsafe_nextPtr=ptr+itemLength;}else{revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 680
column: 8
content: if(strict&&!_validate(subItem)){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 779
column: 8
content: if(!isData(self)){revert();}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 1298
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 44
column: 4
content: functioncheckMembership(bytes32_leaf,uint256_index,bytes32_rootHash,bytes_proof)internalpurereturns(bool){require(_proof.length%32==0);bytes32proofElement;bytes32computedHash=_leaf;uint256index=_index;for(uint256i=32;i<=_proof.length;i+=32){assembly{proofElement:=mload(add(_proof,i))}if(_index%2==0){computedHash=keccak256(abi.encodePacked(computedHash,proofElement));}else{computedHash=keccak256(abi.encodePacked(proofElement,computedHash));}index=index/2;}returncomputedHash==_rootHash;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 91
column: 4
content: functionrecover(bytes32_hash,bytes_sig)internalpurereturns(address){bytes32r;bytes32s;uint8v;if(_sig.length!=65){returnaddress(0);}assembly{r:=mload(add(_sig,32))s:=mload(add(_sig,64))v:=byte(0,mload(add(_sig,96)))}if(v<27){v+=27;}if(v!=27&&v!=28){returnaddress(0);}else{returnecrecover(_hash,v,r,s);}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 139
column: 4
content: functionconcat(bytesmemory_preBytes,bytesmemory_postBytes)internalpurereturns(bytes){bytesmemorytempBytes;assembly{tempBytes:=mload(0x40)letlength:=mload(_preBytes)mstore(tempBytes,length)letmc:=add(tempBytes,0x20)letend:=add(mc,length)for{letcc:=add(_preBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}length:=mload(_postBytes)mstore(tempBytes,add(length,mload(tempBytes)))mc:=endend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(0x40,and(add(add(end,iszero(add(length,mload(_preBytes)))),31),not(31)))}returntempBytes;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 191
column: 4
content: functionslice(bytes_bytes,uint_start,uint_length)internalpurereturns(bytes){require(_bytes.length>=(_start+_length));bytesmemorytempBytes;assembly{switchiszero(_length)case0{tempBytes:=mload(0x40)letlengthmod:=and(_length,31)letmc:=add(add(tempBytes,lengthmod),mul(0x20,iszero(lengthmod)))letend:=add(mc,_length)for{letcc:=add(add(add(_bytes,lengthmod),mul(0x20,iszero(lengthmod))),_start)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(tempBytes,_length)mstore(0x40,and(add(mc,31),not(31)))}default{tempBytes:=mload(0x40)mstore(0x40,add(tempBytes,0x20))}}returntempBytes;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 270
column: 4
content: functiontoRLPItem(bytesmemoryself)internalpurereturns(RLPItemmemory){uintlen=self.length;if(len==0){returnRLPItem(0,0);}uintmemPtr;assembly{memPtr:=add(self,0x20)}returnRLPItem(memPtr,len);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 331
column: 4
content: functionisList(RLPItemmemoryself)internalpurereturns(boolret){if(self._unsafe_length==0){returnfalse;}uintmemPtr=self._unsafe_memPtr;assembly{ret:=iszero(lt(byte(0,mload(memPtr)),0xC0))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 350
column: 4
content: functionisData(RLPItemmemoryself)internalpurereturns(boolret){if(self._unsafe_length==0){returnfalse;}uintmemPtr=self._unsafe_memPtr;assembly{ret:=lt(byte(0,mload(memPtr)),0xC0)}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 369
column: 4
content: functionisEmpty(RLPItemmemoryself)internalpurereturns(boolret){if(isNull(self)){returnfalse;}uintb0;uintmemPtr=self._unsafe_memPtr;assembly{b0:=byte(0,mload(memPtr))}return(b0==DATA_SHORT_START||b0==LIST_SHORT_START);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 390
column: 4
content: functionitems(RLPItemmemoryself)internalpurereturns(uint){if(!isList(self)){return0;}uintb0;uintmemPtr=self._unsafe_memPtr;assembly{b0:=byte(0,mload(memPtr))}uintpos=memPtr+_payloadOffset(self);uintlast=memPtr+self._unsafe_length-1;uintitms;while(pos<=last){pos+=_itemLength(pos);itms++;}returnitms;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 519
column: 4
content: functiontoUint(RLPItemmemoryself)internalpurereturns(uintdata){if(!isData(self)){revert();}uintrStartPos;uintlen;(rStartPos,len)=_decode(self);if(len>32){revert();}assembly{data:=div(mload(rStartPos),exp(256,sub(32,len)))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 543
column: 4
content: functiontoBool(RLPItemmemoryself)internalpurereturns(booldata){if(!isData(self)){revert();}uintrStartPos;uintlen;(rStartPos,len)=_decode(self);if(len!=1){revert();}uinttemp;assembly{temp:=byte(0,mload(rStartPos))}if(temp>1){revert();}returntemp==1?true:false;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 572
column: 4
content: functiontoByte(RLPItemmemoryself)internalpurereturns(bytedata){if(!isData(self)){revert();}uintrStartPos;uintlen;(rStartPos,len)=_decode(self);if(len!=1){revert();}uinttemp;assembly{temp:=byte(0,mload(rStartPos))}returnbyte(temp);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 624
column: 4
content: functiontoAddress(RLPItemmemoryself)internalpurereturns(addressdata){if(!isData(self)){revert();}uintrStartPos;uintlen;(rStartPos,len)=_decode(self);if(len!=20){revert();}assembly{data:=div(mload(rStartPos),exp(256,12))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 705
column: 4
content: function_payloadOffset(RLPItemmemoryself)privatepurereturns(uint){if(self._unsafe_length==0){return0;}uintb0;uintmemPtr=self._unsafe_memPtr;assembly{b0:=byte(0,mload(memPtr))}if(b0<DATA_SHORT_START){return0;}if(b0<DATA_LONG_START||(b0>=LIST_SHORT_START&&b0<LIST_LONG_START)){return1;}if(b0<LIST_SHORT_START){returnb0-DATA_LONG_OFFSET+1;}returnb0-LIST_LONG_OFFSET+1;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 735
column: 4
content: function_itemLength(uintmemPtr)privatepurereturns(uintlen){uintb0;assembly{b0:=byte(0,mload(memPtr))}if(b0<DATA_SHORT_START){len=1;}elseif(b0<DATA_LONG_START){len=b0-DATA_SHORT_START+1;}elseif(b0<LIST_SHORT_START){assembly{letbLen:=sub(b0,0xB7)letdLen:=div(mload(add(memPtr,1)),exp(256,sub(32,bLen)))len:=add(1,add(bLen,dLen))}}elseif(b0<LIST_LONG_START){len=b0-LIST_SHORT_START+1;}else{assembly{letbLen:=sub(b0,0xF7)letdLen:=div(mload(add(memPtr,1)),exp(256,sub(32,bLen)))len:=add(1,add(bLen,dLen))}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 774
column: 4
content: function_decode(RLPItemmemoryself)privatepurereturns(uintmemPtr,uintlen){if(!isData(self)){revert();}uintb0;uintstart=self._unsafe_memPtr;assembly{b0:=byte(0,mload(start))}if(b0<DATA_SHORT_START){memPtr=start;len=1;return;}if(b0<DATA_LONG_START){len=self._unsafe_length-1;memPtr=start+1;}else{uintbLen;assembly{bLen:=sub(b0,0xB7)}len=self._unsafe_length-1-bLen;memPtr=start+bLen+1;}return;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 843
column: 4
content: function_validate(RLPItemmemoryself)privatepurereturns(boolret){uintb0;uintb1;uintmemPtr=self._unsafe_memPtr;assembly{b0:=byte(0,mload(memPtr))b1:=byte(1,mload(memPtr))}if(b0==DATA_SHORT_START+1&&b1<DATA_SHORT_START){returnfalse;}returntrue;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 894
column: 4
content: functionencodeAddress(addressself)internalpurereturns(bytes){bytesmemoryinputBytes;assembly{letm:=mload(0x40)mstore(add(m,20),xor(0x140000000000000000000000000000000000000000,self))mstore(0x40,add(m,52))inputBytes:=m}returnencodeBytes(inputBytes);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 980
column: 4
content: functiontoBinary(uintx)internalpurereturns(bytes){bytesmemoryb=newbytes(32);assembly{mstore(add(b,32),x)}for(uinti=0;i<32;i++){if(b[i]!=0){break;}}bytesmemoryres=newbytes(32-i);for(uintj=0;j<res.length;j++){res[j]=b[i++];}returnres;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1004
column: 4
content: functionmemcpy(uintdest,uintsrc,uintlen)privatepure{for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}dest+=32;src+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1027
column: 4
content: functionflatten(bytes[]memoryself)privatepurereturns(bytes){if(self.length==0){returnnewbytes(0);}uintlen;for(uinti=0;i<self.length;i++){len+=self[i].length;}bytesmemoryflattened=newbytes(len);uintflattenedPtr;assembly{flattenedPtr:=add(flattened,0x20)}for(i=0;i<self.length;i++){bytesmemoryitem=self[i];uintselfPtr;assembly{selfPtr:=add(item,0x20)}memcpy(flattenedPtr,selfPtr,item.length);flattenedPtr+=self[i].length;}returnflattened;}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 812
column: 4
content: function_copyToBytes(uintbtsPtr,bytesmemorytgt,uintbtsLen)privateview{assembly{{leti:=0letwords:=div(add(btsLen,31),32)letrOffset:=btsPtrletwOffset:=add(tgt,0x20)tag_loop:jumpi(end,eq(i,words)){letoffset:=mul(i,0x20)mstore(add(wOffset,offset),mload(add(rOffset,offset)))i:=add(i,1)}jump(tag_loop)end:mstore(add(tgt,add(0x20,mload(tgt))),0)}}}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 777
column: 16
content: (uintmemPtr,uintlen)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 1425
column: 66
content: (uint256,uint256)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 48
column: 8
content: bytes_proof

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 91
column: 36
content: bytes_sig

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 139
column: 92
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 191
column: 19
content: bytes_bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 191
column: 83
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 879
column: 67
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 894
column: 64
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 910
column: 58
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 919
column: 56
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 928
column: 58
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 941
column: 68
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 952
column: 71
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 980
column: 53
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1027
column: 64
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1180
column: 28
content: bytes_encodedDepositTx

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1196
column: 91
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1229
column: 8
content: bytes_signatures

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1230
column: 8
content: bytes_confirmationSignatures

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1607
column: 8
content: bytes_encodedTx

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1608
column: 8
content: bytes_txInclusionProof

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1609
column: 8
content: bytes_txSignatures

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1610
column: 8
content: bytes_txConfirmationSignatures

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1655
column: 8
content: bytes_encodedSpendingTx

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1656
column: 8
content: bytes_spendingTxConfirmationSignature

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 58
column: 12
content: assembly{proofElement:=mload(add(_proof,i))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 102
column: 8
content: assembly{r:=mload(add(_sig,32))s:=mload(add(_sig,64))v:=byte(0,mload(add(_sig,96)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 142
column: 8
content: assembly{tempBytes:=mload(0x40)letlength:=mload(_preBytes)mstore(tempBytes,length)letmc:=add(tempBytes,0x20)letend:=add(mc,length)for{letcc:=add(_preBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}length:=mload(_postBytes)mstore(tempBytes,add(length,mload(tempBytes)))mc:=endend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(0x40,and(add(add(end,iszero(add(length,mload(_preBytes)))),31),not(31)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 196
column: 8
content: assembly{switchiszero(_length)case0{tempBytes:=mload(0x40)letlengthmod:=and(_length,31)letmc:=add(add(tempBytes,lengthmod),mul(0x20,iszero(lengthmod)))letend:=add(mc,_length)for{letcc:=add(add(add(_bytes,lengthmod),mul(0x20,iszero(lengthmod))),_start)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(tempBytes,_length)mstore(0x40,and(add(mc,31),not(31)))}default{tempBytes:=mload(0x40)mstore(0x40,add(tempBytes,0x20))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 280
column: 8
content: assembly{memPtr:=add(self,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 340
column: 8
content: assembly{ret:=iszero(lt(byte(0,mload(memPtr)),0xC0))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 359
column: 8
content: assembly{ret:=lt(byte(0,mload(memPtr)),0xC0)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 379
column: 8
content: assembly{b0:=byte(0,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 400
column: 8
content: assembly{b0:=byte(0,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 533
column: 8
content: assembly{data:=div(mload(rStartPos),exp(256,sub(32,len)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 558
column: 8
content: assembly{temp:=byte(0,mload(rStartPos))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 587
column: 8
content: assembly{temp:=byte(0,mload(rStartPos))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 638
column: 8
content: assembly{data:=div(mload(rStartPos),exp(256,12))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 715
column: 8
content: assembly{b0:=byte(0,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 741
column: 8
content: assembly{b0:=byte(0,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 751
column: 12
content: assembly{letbLen:=sub(b0,0xB7)letdLen:=div(mload(add(memPtr,1)),exp(256,sub(32,bLen)))len:=add(1,add(bLen,dLen))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 761
column: 12
content: assembly{letbLen:=sub(b0,0xF7)letdLen:=div(mload(add(memPtr,1)),exp(256,sub(32,bLen)))len:=add(1,add(bLen,dLen))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 784
column: 8
content: assembly{b0:=byte(0,mload(start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 797
column: 12
content: assembly{bLen:=sub(b0,0xB7)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 818
column: 8
content: assembly{{leti:=0letwords:=div(add(btsLen,31),32)letrOffset:=btsPtrletwOffset:=add(tgt,0x20)tag_loop:jumpi(end,eq(i,words)){letoffset:=mul(i,0x20)mstore(add(wOffset,offset),mload(add(rOffset,offset)))i:=add(i,1)}jump(tag_loop)end:mstore(add(tgt,add(0x20,mload(tgt))),0)}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 852
column: 8
content: assembly{b0:=byte(0,mload(memPtr))b1:=byte(1,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 896
column: 8
content: assembly{letm:=mload(0x40)mstore(add(m,20),xor(0x140000000000000000000000000000000000000000,self))mstore(0x40,add(m,52))inputBytes:=m}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 982
column: 8
content: assembly{mstore(add(b,32),x)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1006
column: 12
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1014
column: 8
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1039
column: 8
content: assembly{flattenedPtr:=add(flattened,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1045
column: 12
content: assembly{selfPtr:=add(item,0x20)}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1304
column: 4
content: addressowner;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1305
column: 4
content: uint256[]heapList;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1503
column: 4
content: PriorityQueueexitQueue;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1510
column: 4
content: IERC20token;

SOLIDITY_VISIBILITY :4
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_ARRAY_LENGTH_MANIPULATION :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :2
SOLIDITY_EXTRA_GAS_IN_LOOPS :9
SOLIDITY_ADDRESS_HARDCODED :8
SOLIDITY_UPGRADE_TO_050 :24
SOLIDITY_GAS_LIMIT_IN_LOOPS :10
SOLIDITY_SHOULD_RETURN_STRUCT :2
SOLIDITY_SHOULD_NOT_BE_PURE :21
SOLIDITY_SAFEMATH :1
SOLIDITY_REVERT_REQUIRE :19
SOLIDITY_USING_INLINE_ASSEMBLY :27
SOLIDITY_SHOULD_NOT_BE_VIEW :1
