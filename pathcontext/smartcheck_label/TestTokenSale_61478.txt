C:\Users\hp\DataSet\TestTokenSale.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 153
column: 33
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 171
column: 33
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 172
column: 47
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 240
column: 26
content: 0x1

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 63
column: 60
content: throw

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 63
column: 4
content: if(!sale.proxyPayment.value(10finney)(address(this)))throw;

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 17
column: 2
content: functionbeforeAll(){factory=address(newMiniMeTokenFactory());}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 21
column: 2
content: functionbeforeEach(){throwProxy=newThrowProxy(address(this));}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 25
column: 2
content: functiontestHasCorrectPriceForStages(){AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(this),address(this),3,1,2);Assert.equal(sale.getPrice(10),3,"Should have correct price for start stage 1");Assert.equal(sale.getPrice(13),3,"Should have correct price for middle stage 1");Assert.equal(sale.getPrice(14),3,"Should have correct price for final stage 1");Assert.equal(sale.getPrice(15),1,"Should have correct price for start stage 2");Assert.equal(sale.getPrice(18),1,"Should have correct price for middle stage 2");Assert.equal(sale.getPrice(19),1,"Should have correct price for final stage 2");Assert.equal(sale.getPrice(9),0,"Should have incorrect price out of sale");Assert.equal(sale.getPrice(20),0,"Should have incorrect price out of sale");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 38
column: 2
content: functiontestHasCorrectPriceForMultistage(){AragonTokenSaleMocksale=newAragonTokenSaleMock(10,40,address(this),address(this),5,1,3);Assert.equal(sale.getPrice(10),5,"Should have correct price");Assert.equal(sale.getPrice(19),5,"Should have correct price");Assert.equal(sale.getPrice(20),3,"Should have correct price");Assert.equal(sale.getPrice(25),3,"Should have correct price");Assert.equal(sale.getPrice(30),1,"Should have correct price");Assert.equal(sale.getPrice(39),1,"Should have correct price");Assert.equal(sale.getPrice(9),0,"Should have incorrect price out of sale");Assert.equal(sale.getPrice(41),0,"Should have incorrect price out of sale");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 51
column: 2
content: functiontestAllocatesTokensInSale(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(ms),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);sale.setMockedBlockNumber(12);Assert.isTrue(sale.proxyPayment.value(25finney)(address(this)),'proxy payment should succeed');Assert.equal(sale.totalCollected(),25finney,'Should have correct total collected');sale.setMockedBlockNumber(17);if(!sale.proxyPayment.value(10finney)(address(this)))throw;Assert.equal(ERC20(sale.token()).balanceOf(address(this)),85finney,'Should have correct balance after allocation');Assert.equal(ERC20(sale.token()).totalSupply(),85finney,'Should have correct supply after allocation');Assert.equal(sale.saleWallet().balance,35finney,'Should have sent money to multisig');Assert.equal(sale.totalCollected(),35finney,'Should have correct total collected');}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 71
column: 2
content: functiontestCannotGetTokensInNotInitiatedSale(){TestTokenSale(throwProxy).throwsWhenGettingTokensInNotInitiatedSale();throwProxy.assertThrows("Should have thrown when sale is not activated");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 76
column: 2
content: functionthrowsWhenGettingTokensInNotInitiatedSale(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(this),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);sale.setMockedBlockNumber(12);sale.proxyPayment.value(50finney)(address(this));}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 88
column: 2
content: functiontestEmergencyStop(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(ms),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);sale.setMockedBlockNumber(12);Assert.isTrue(sale.proxyPayment.value(15finney)(address(this)),'proxy payment should succeed');Assert.equal(ERC20(sale.token()).balanceOf(address(this)),45finney,'Should have correct balance after allocation');ms.emergencyStopSale(address(sale));Assert.isTrue(sale.saleStopped(),"Sale should be stopped");ms.restartSale(sale);sale.setMockedBlockNumber(16);Assert.isFalse(sale.saleStopped(),"Sale should be restarted");Assert.isTrue(sale.proxyPayment.value(1finney)(address(this)),'proxy payment should succeed');Assert.equal(ERC20(sale.token()).balanceOf(address(this)),46finney,'Should have correct balance after allocation');}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 109
column: 2
content: functiontestCantBuyTokensInStoppedSale(){TestTokenSale(throwProxy).throwsWhenGettingTokensWithStoppedSale();throwProxy.assertThrows("Should have thrown when sale is stopped");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 114
column: 2
content: functionthrowsWhenGettingTokensWithStoppedSale(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(ms),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);sale.setMockedBlockNumber(12);ms.emergencyStopSale(address(sale));sale.proxyPayment.value(20finney)(address(this));}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 125
column: 2
content: functiontestCantBuyTokensInEndedSale(){TestTokenSale(throwProxy).throwsWhenGettingTokensWithEndedSale();throwProxy.assertThrows("Should have thrown when sale is ended");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 130
column: 2
content: functionthrowsWhenGettingTokensWithEndedSale(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(ms),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);sale.setMockedBlockNumber(21);sale.proxyPayment.value(20finney)(address(this));}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 140
column: 2
content: functiontestTokensAreLockedDuringSale(){TestTokenSale(throwProxy).throwsWhenTransferingDuringSale();throwProxy.assertThrows("Should have thrown transferring during sale");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 145
column: 2
content: functionthrowsWhenTransferingDuringSale(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(ms),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);sale.setMockedBlockNumber(12);sale.proxyPayment.value(15finney)(address(this));ERC20(sale.token()).transfer(0x1,10finney);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 156
column: 2
content: functiontestTokensAreTransferrableAfterSale(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(ms),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);Assert.equal(ANT(sale.token()).controller(),address(sale),"Sale is controller during sale");sale.setMockedBlockNumber(12);sale.proxyPayment.value(15finney)(address(this));sale.setMockedBlockNumber(22);ms.finalizeSale(sale);Assert.equal(ANT(sale.token()).controller(),sale.networkPlaceholder(),"Network placeholder is controller after sale");ERC20(sale.token()).transfer(0x1,10finney);Assert.equal(ERC20(sale.token()).balanceOf(0x1),10finney,'Should have correct balance after receiving tokens');}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 175
column: 2
content: functiontestFundsAreTransferrableAfterSale(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(ms),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);Assert.equal(ANT(sale.token()).controller(),address(sale),"Sale is controller during sale");sale.setMockedBlockNumber(12);sale.proxyPayment.value(15finney)(address(this));sale.setMockedBlockNumber(22);ms.finalizeSale(sale);ms.withdrawWallet(sale);Assert.equal(ms.balance,15finney,"Funds are collected after sale");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 192
column: 2
content: functiontestFundsAreLockedDuringSale(){TestTokenSale(throwProxy).throwsWhenTransferingFundsDuringSale();throwProxy.assertThrows("Should have thrown transferring funds during sale");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 197
column: 2
content: functionthrowsWhenTransferingFundsDuringSale(){MultisigMockms=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(ms),address(ms),3,1,2);ms.deployAndSetANT(sale);ms.activateSale(sale);Assert.equal(ANT(sale.token()).controller(),address(sale),"Sale is controller during sale");sale.setMockedBlockNumber(12);sale.proxyPayment.value(15finney)(address(this));sale.setMockedBlockNumber(22);ms.finalizeSale(sale);ms.withdrawWallet(sale);Assert.equal(ms.balance,15finney,"Funds are collected after sale");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 214
column: 2
content: functiontestNetworkDeployment(){MultisigMockdevMultisig=newMultisigMock();MultisigMockcommunityMultisig=newMultisigMock();AragonTokenSaleMocksale=newAragonTokenSaleMock(10,20,address(devMultisig),address(communityMultisig),3,1,2);devMultisig.deployAndSetANT(sale);devMultisig.activateSale(sale);communityMultisig.activateSale(sale);Assert.equal(ANT(sale.token()).controller(),address(sale),"Sale is controller during sale");sale.setMockedBlockNumber(12);sale.proxyPayment.value(15finney)(address(this));sale.setMockedBlockNumber(22);devMultisig.finalizeSale(sale);Assert.equal(ANT(sale.token()).controller(),sale.networkPlaceholder(),"Network placeholder is controller after sale");doTransfer(sale.token());communityMultisig.deployNetwork(sale,newNetworkMock());TestTokenSale(throwProxy).doTransfer(sale.token());throwProxy.assertThrows("Should have thrown transferring with network mock");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 239
column: 2
content: functiondoTransfer(addresstoken){ERC20(token).transfer(0x1,10finney);}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 13
column: 2
content: addressfactory;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 15
column: 2
content: ThrowProxythrowProxy;

SOLIDITY_VISIBILITY :22
SOLIDITY_DEPRECATED_CONSTRUCTIONS :1
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_REVERT_REQUIRE :1
SOLIDITY_ADDRESS_HARDCODED :4
