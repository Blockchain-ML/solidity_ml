C:\Users\hp\DataSet\StakingProxy.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 30
column: 0
content: contractStakingProxyisIStakingProxy,MixinStorage,MixinConstants{usingLibSafeDowncastforuint256;constructor(address_stakingContract)publicMixinStorage(){_addAuthorizedAddress(msg.sender);_attachStakingContract(_stakingContract);_removeAuthorizedAddressAtIndex(msg.sender,0);}function()externalpayable{addressstakingContract_=stakingContract;if(stakingContract_==NIL_ADDRESS){LibRichErrors.rrevert(LibStakingRichErrors.ProxyDestinationCannotBeNilError());}(boolsuccess,bytesmemoryreturnData)=stakingContract_.delegatecall(msg.data);assembly{switchsuccesscase0{revert(add(0x20,returnData),mload(returnData))}default{return(add(0x20,returnData),mload(returnData))}}}functionattachStakingContract(address_stakingContract)externalonlyAuthorized{_attachStakingContract(_stakingContract);}functiondetachStakingContract()externalonlyAuthorized{stakingContract=NIL_ADDRESS;emitStakingContractDetachedFromProxy();}functionbatchExecute(bytes[]calldatadata)externalreturns(bytes[]memorybatchReturnData){boolsuccess;bytesmemoryreturnData;uint256dataLength=data.length;batchReturnData=newbytes[](dataLength);addressstaking=stakingContract;if(staking==NIL_ADDRESS){LibRichErrors.rrevert(LibStakingRichErrors.ProxyDestinationCannotBeNilError());}for(uint256i=0;i!=dataLength;i++){(success,returnData)=staking.delegatecall(data[i]);if(!success){assembly{revert(add(0x20,returnData),mload(returnData))}}batchReturnData[i]=returnData;}returnbatchReturnData;}functionassertValidStorageParams()publicview{uint256_epochDurationInSeconds=epochDurationInSeconds;if(_epochDurationInSeconds<5days||_epochDurationInSeconds>30days){LibRichErrors.rrevert(LibStakingRichErrors.InvalidParamValueError(LibStakingRichErrors.InvalidParamValueErrorCodes.InvalidEpochDuration));}uint32_cobbDouglasAlphaDenominator=cobbDouglasAlphaDenominator;if(cobbDouglasAlphaNumerator>_cobbDouglasAlphaDenominator||_cobbDouglasAlphaDenominator==0){LibRichErrors.rrevert(LibStakingRichErrors.InvalidParamValueError(LibStakingRichErrors.InvalidParamValueErrorCodes.InvalidCobbDouglasAlpha));}if(rewardDelegatedStakeWeight>PPM_DENOMINATOR){LibRichErrors.rrevert(LibStakingRichErrors.InvalidParamValueError(LibStakingRichErrors.InvalidParamValueErrorCodes.InvalidRewardDelegatedStakeWeight));}if(minimumPoolStake<2){LibRichErrors.rrevert(LibStakingRichErrors.InvalidParamValueError(LibStakingRichErrors.InvalidParamValueErrorCodes.InvalidMinimumPoolStake));}}function_attachStakingContract(address_stakingContract)internal{stakingContract=_stakingContract;emitStakingContractAttachedToProxy(_stakingContract);(booldidInitSucceed,bytesmemoryinitReturnData)=stakingContract.delegatecall(abi.encodeWithSelector(IStorageInit(0).init.selector));if(!didInitSucceed){assembly{revert(add(initReturnData,0x20),mload(initReturnData))}}assertValidStorageParams();}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 19
column: 16
content: ^

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 67
column: 67
content: delegatecall(msg.data)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 125
column: 44
content: delegatecall(data[i])

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 195
column: 77
content: delegatecall(abi.encodeWithSelector(IStorageInit(0).init.selector))

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 70
column: 8
content: assembly{switchsuccesscase0{revert(add(0x20,returnData),mload(returnData))}default{return(add(0x20,returnData),mload(returnData))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 129
column: 16
content: assembly{revert(add(0x20,returnData),mload(returnData))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 200
column: 12
content: assembly{revert(add(initReturnData,0x20),mload(initReturnData))}

SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_USING_INLINE_ASSEMBLY :3
SOLIDITY_UNCHECKED_CALL :3
