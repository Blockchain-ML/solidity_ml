C:\Users\hp\DataSet\WithdrawManager.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 41
column: 60
content: 0x0

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 20
column: 0
content: contractWithdrawManagerisWithdrawManagerStorage,IWithdrawManager{usingRLPReaderforbytes;usingRLPReaderforRLPReader.RLPItem;usingMerkleforbytes32;modifierisBondProvided(){require(msg.value==BOND_AMOUNT,"Invalid Bond amount");_;}modifierisPredicateAuthorized(){require(registry.predicates(msg.sender)!=Registry.Type.Invalid,"PREDICATE_NOT_AUTHORIZED");_;}modifiercheckPredicateAndTokenMapping(addressrootToken){Registry.Type_type=registry.predicates(msg.sender);require(registry.rootToChildToken(rootToken)!=address(0x0),"rootToken not supported");if(_type==Registry.Type.ERC20){require(registry.isERC721(rootToken)==false,"Predicate supports only ERC20 tokens");}elseif(_type==Registry.Type.ERC721){require(registry.isERC721(rootToken)==true,"Predicate supports only ERC721 tokens");}elseif(_type==Registry.Type.Custom){}else{revert("PREDICATE_NOT_AUTHORIZED");}_;}function()externalpayable{}functioncreateExitQueue(addresstoken)external{require(msg.sender==address(registry),"UNAUTHORIZED_REGISTRY_ONLY");exitsQueues[token]=address(newPriorityQueue());}functionverifyInclusion(bytescalldatadata,uint8offset,boolverifyTxInclusion)externalviewreturns(uint256){RLPReader.RLPItem[]memoryreferenceTxData=data.toRlpItem().toList();uint256headerNumber=referenceTxData[offset].toUint();bytesmemorybranchMask=referenceTxData[offset+8].toBytes();require(MerklePatriciaProof.verify(referenceTxData[offset+6].toBytes(),branchMask,referenceTxData[offset+7].toBytes(),bytes32(referenceTxData[offset+5].toUint())),"INVALID_RECEIPT_MERKLE_PROOF");if(verifyTxInclusion){require(MerklePatriciaProof.verify(referenceTxData[offset+10].toBytes(),branchMask,referenceTxData[offset+11].toBytes(),bytes32(referenceTxData[offset+4].toUint())),"INVALID_TX_MERKLE_PROOF");}uint256blockNumber=referenceTxData[offset+2].toUint();uint256createdAt=checkBlockMembershipInCheckpoint(blockNumber,referenceTxData[offset+3].toUint(),bytes32(referenceTxData[offset+4].toUint()),bytes32(referenceTxData[offset+5].toUint()),headerNumber,referenceTxData[offset+1].toBytes());uint256_branchMask=branchMask.toRlpItem().toUint();require(_branchMask&0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000==0,"Branch mask should be 32 bits");return(getExitableAt(createdAt)<<127)|(blockNumber<<32)|_branchMask;}functionstartExitWithDepositedTokens(uint256depositId,addresstoken,uint256amountOrToken)externalpayableisBondProvided{(bytes32depositHash,uint256createdAt)=getDepositManager().deposits(depositId);require(keccak256(abi.encodePacked(msg.sender,token,amountOrToken))==depositHash,"UNAUTHORIZED_EXIT");uint256ageOfInput=getExitableAt(createdAt)<<127;uint256exitId=ageOfInput<<1;addresspredicate=registry.isTokenMappedAndGetPredicate(token);_addExitToQueue(msg.sender,token,amountOrToken,bytes32(0),false,exitId);_addInput(exitId,ageOfInput,msg.sender,predicate,token);}functionaddExitToQueue(addressexitor,addresschildToken,addressrootToken,uint256exitAmountOrTokenId,bytes32txHash,boolisRegularExit,uint256priority)externalcheckPredicateAndTokenMapping(rootToken){require(registry.rootToChildToken(rootToken)==childToken,"INVALID_ROOT_TO_CHILD_TOKEN_MAPPING");_addExitToQueue(exitor,rootToken,exitAmountOrTokenId,txHash,isRegularExit,priority);}functionchallengeExit(uint256exitId,uint256inputId,bytescalldata<missing ')'>challengeData,addressadjudicatorPredicate)external{PlasmaExitstorageexit=exits[exitId];Inputstorageinput=exit.inputs[inputId];require(exit.owner!=address(0x0)&&input.utxoOwner!=address(0x0),"Invalid exit or input id");require(registry.predicates(adjudicatorPredicate)!=Registry.Type.Invalid,"INVALID_PREDICATE");require(IPredicate(adjudicatorPredicate).verifyDeprecation(encodeExit<missing ';'>(exit),encodeInputUtxo(inputId,input),challengeData),"Challenge failed");ExitNFT(exitNft).burn(exitId);msg.sender.transfer(BOND_AMOUNT);emitExitCancelled(exitId);}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 54
column: 15
content: if(_type==Registry.Type.Custom){}else{revert("PREDICATE_NOT_AUTHORIZED");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 210
column: 4
content: functionchallengeExit(uint256exitId,uint256inputId,bytescalldata<missing ')'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 213
column: 23
content: challengeData,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 214
column: 8
content: addressadjudicatorPredicate)external{

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 216
column: 8
content: PlasmaExitstorageexit=exits[exitId];

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 217
column: 8
content: Inputstorageinput=exit.inputs[inputId];

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 218
column: 8
content: require(exit.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 219
column: 17
content: owner!=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 219
column: 26
content: address

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 219
column: 33
content: (0x0)&&input.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 219
column: 48
content: utxoOwner!=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 219
column: 61
content: address

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 219
column: 68
content: (0x0),"Invalid exit or input id");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 222
column: 8
content: require(registry.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 223
column: 21
content: predicates(adjudicatorPredicate)!=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 223
column: 57
content: Registry.Type.Invalid,"INVALID_PREDICATE");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 226
column: 8
content: require(IPredicate

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 227
column: 22
content: (adjudicatorPredicate).verifyDeprecation

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 227
column: 62
content: (encodeExit<missing ';'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 228
column: 26
content: (exit),encodeInputUtxo

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 229
column: 31
content: (inputId,input),

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 230
column: 16
content: challengeData),"Challenge failed");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 235
column: 8
content: ExitNFT(exitNft).

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 235
column: 25
content: burn(exitId);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 238
column: 8
content: msg.sender.transfer(BOND_AMOUNT);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 241
column: 8
content: emitExitCancelled

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 241
column: 26
content: (exitId);

SOLIDITY_VISIBILITY :26
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_REVERT_REQUIRE :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_ADDRESS_HARDCODED :1
