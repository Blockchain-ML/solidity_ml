C:\Users\hp\DataSet\RebalancingSetCTokenExchangeIssuanceModule.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 106
column: 8
content: for(uint256i=0;i<baseSetComponents.length;i++){addresscurrentComponentAddress=baseSetComponents[i];addressunderlyingAddress=cTokenWhiteList.whitelist(currentComponentAddress);uint256vaultQuantity=vaultInstance.getOwnerBalance(currentComponentAddress,address(this));if(underlyingAddress!=address(0)){uint256underlyingVaultQuantity=vaultInstance.getOwnerBalance(underlyingAddress,address(this));if(underlyingVaultQuantity>0){coreInstance.withdrawModule(address(this),_returnAddress,underlyingAddress,underlyingVaultQuantity);}}if(vaultQuantity>0){coreInstance.withdrawModule(address(this),_returnAddress,currentComponentAddress,vaultQuantity);}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 159
column: 8
content: for(uint256i=0;i<baseSetComponents.length;i++){addresscurrentComponentAddress=baseSetComponents[i];uint256currentComponentQuantity=ERC20Wrapper.balanceOf(baseSetComponents[i],address(this));addressunderlyingAddress=cTokenWhiteList.whitelist(currentComponentAddress);if(underlyingAddress!=address(0)){uint256underlyingQuantity=ERC20Wrapper.balanceOf(underlyingAddress,address(this));if(underlyingQuantity>0){ERC20Wrapper.transfer(underlyingAddress,_returnAddress,underlyingQuantity);}}else{if(currentComponentQuantity>0){ERC20Wrapper.transfer(currentComponentAddress,_returnAddress,currentComponentQuantity);}}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 106
column: 8
content: for(uint256i=0;i<baseSetComponents.length;i++){addresscurrentComponentAddress=baseSetComponents[i];addressunderlyingAddress=cTokenWhiteList.whitelist(currentComponentAddress);uint256vaultQuantity=vaultInstance.getOwnerBalance(currentComponentAddress,address(this));if(underlyingAddress!=address(0)){uint256underlyingVaultQuantity=vaultInstance.getOwnerBalance(underlyingAddress,address(this));if(underlyingVaultQuantity>0){coreInstance.withdrawModule(address(this),_returnAddress,underlyingAddress,underlyingVaultQuantity);}}if(vaultQuantity>0){coreInstance.withdrawModule(address(this),_returnAddress,currentComponentAddress,vaultQuantity);}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 159
column: 8
content: for(uint256i=0;i<baseSetComponents.length;i++){addresscurrentComponentAddress=baseSetComponents[i];uint256currentComponentQuantity=ERC20Wrapper.balanceOf(baseSetComponents[i],address(this));addressunderlyingAddress=cTokenWhiteList.whitelist(currentComponentAddress);if(underlyingAddress!=address(0)){uint256underlyingQuantity=ERC20Wrapper.balanceOf(underlyingAddress,address(this));if(underlyingQuantity>0){ERC20Wrapper.transfer(underlyingAddress,_returnAddress,underlyingQuantity);}}else{if(currentComponentQuantity>0){ERC20Wrapper.transfer(currentComponentAddress,_returnAddress,currentComponentQuantity);}}}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 51
column: 4
content: usingSafeMathforuint256;

SOLIDITY_SAFEMATH :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_GAS_LIMIT_IN_LOOPS :2
