C:\Users\hp\DataSet\contracts\ropsten\3b\3b14544888068c5b8a8e4b469cbd2dbbbff2581c_BTicketBlockContract.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 121
column: 8
content: for(uint32i=0;i<ticketTypeList.length;i++){bytes32tmpTicketType=ticketTypeList[i];buEventMap[buEventId].ticketStructure.push(TBdatasets.TicketStructureElement(tmpTicketType,ticketTypeQuantityList[i],maxQuantityPerOneList[i],ticketPriceList[i],minResellList[i],maxResellList[i]));}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 121
column: 8
content: for(uint32i=0;i<ticketTypeList.length;i++){bytes32tmpTicketType=ticketTypeList[i];buEventMap[buEventId].ticketStructure.push(TBdatasets.TicketStructureElement(tmpTicketType,ticketTypeQuantityList[i],maxQuantityPerOneList[i],ticketPriceList[i],minResellList[i],maxResellList[i]));}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 54
column: 0
content: contractBTicketBlockContract{enumPaymentType{CASH,CREDIT_OR_DEBIT,CRYPTOCURRENCY_ETH,CRYPTOCURRENCY_TOMO}addressmasterAddress;mapping(uint256=>TBdatasets.BusinessEvent)buEventMap;uint256buEventMapSize;mapping(uint256=>TBdatasets.Ticket)ticketMap;uint256ticketMapSize;constructor()public{masterAddress=msg.sender;buEventMapSize=0;ticketMapSize=0;}functionaddNewEventToBusiness(uint256businessId,addressbusinessAddress,stringbuEventName,stringbuEventDescription,uint256sellStart,uint256sellEnd,uint256buEventStart,uint256buEventEnd)publicreturns(uint256){require(masterAddress==msg.sender,"Sender address not equals master address.");uint256buEventId=buEventMapSize+1;buEventMap[buEventId].buEventId=buEventId;buEventMap[buEventId].businessId=businessId;buEventMap[buEventId].businessAddress=businessAddress;buEventMap[buEventId].buEventName=buEventName;buEventMap[buEventId].buEventDescription=buEventDescription;buEventMap[buEventId].sellStart=sellStart;buEventMap[buEventId].sellEnd=sellEnd;buEventMap[buEventId].buEventStart=buEventStart;buEventMap[buEventId].buEventEnd=buEventEnd;buEventMap[buEventId].isEventFinished=false;buEventMap[buEventId].isBuEvent=true;buEventMap[buEventId].ticketIdList=newuint256[](0);buEventMapSize=buEventMapSize+1;returnbuEventId;}functionupdateTicketStructure(uint256buEventId,bytes32[]ticketTypeList,uint256[]ticketTypeQuantityList,uint256[]maxQuantityPerOneList,uint256[]ticketPriceList,uint256[]minResellList,uint256[]maxResellList)publicreturns(uint256){require(masterAddress==msg.sender,"Sender address not equals master address.");require(ticketTypeList.length>0,"Size of ticket type must greater than 0.");require(ticketTypeList.length==ticketTypeQuantityList.length,"Each list must have same size.");require(ticketTypeList.length==maxQuantityPerOneList.length,"Each list must have same size.");require(ticketTypeList.length==ticketPriceList.length,"Each list must have same size.");require(ticketTypeList.length==minResellList.length,"Each list must have same size.");require(ticketTypeList.length==maxResellList.length,"Each list must have same size.");for(uint32i=0;i<ticketTypeList.length;i++){bytes32tmpTicketType=ticketTypeList[i];buEventMap[buEventId].ticketStructure.push(TBdatasets.TicketStructureElement(tmpTicketType,ticketTypeQuantityList[i],maxQuantityPerOneList[i],ticketPriceList[i],minResellList[i],maxResellList[i]));}returnbuEventId;}functionaddNewTicket(uint256buEventId,bytes32ticketType,uint256ticketPrice,uint256minResell,uint256maxResell)privatereturns(uint256){TBdatasets.BusinessEventmemorycurrentBuEvent=buEventMap[buEventId];require(currentBuEvent.isBuEvent==false,"Current event is invalid.");require(currentBuEvent.isEventFinished,"Event is finished.");require(currentBuEvent.businessAddress==msg.sender,"Sender address not equals business address.");uint256ticketId=ticketMapSize+1;ticketMap[ticketId]=TBdatasets.Ticket(ticketId,buEventId,ticketType,ticketPrice,minResell,maxResell,"","","","","",false,true);ticketMapSize=ticketMapSize+1;buEventMap[buEventId].ticketIdList.push(ticketId);returnticketId;}functionaddAllNewTicket(uint256buEventId,bytes32[]ticketType,uint256[]ticketPrice,uint256[]minResell,uint256[]maxResell)publicreturns(uint256){return0;}functionupdateHolder(uint256ticketId,bytes32holderId,bytes32holderEthAddress,bytes32holderName,bytes32holderPhone)privatereturns(uint256){TBdatasets.TicketmemorycurrentTicket=ticketMap[ticketId];require(currentTicket.isTicket==false,"Current ticket is invalid.");TBdatasets.BusinessEventmemorycurrentBuEvent=buEventMap[currentTicket.buEventId];require(currentBuEvent.isBuEvent==false,"Current event is invalid.");require(currentBuEvent.isEventFinished,"Event is finished.");currentTicket.holderEthAddress=holderEthAddress;currentTicket.holderName=holderName;currentTicket.holderPhone=holderPhone;currentTicket.holderId=holderId;currentTicket.isSold=true;ticketMap[ticketId]=currentTicket;returncurrentTicket.ticketId;}functionbuyTicketByEth(uint256ticketId,bytes32holderId,bytes32holderEthAddress,bytes32holderName,bytes32holderPhone)publicpayable{TBdatasets.TicketmemorycurrentTicket=ticketMap[ticketId];require(currentTicket.isTicket==false,"Current ticket is invalid.");TBdatasets.BusinessEventmemorycurrentBuEvent=buEventMap[currentTicket.buEventId];require(currentBuEvent.isBuEvent==false,"Current event is invalid.");require(currentBuEvent.isEventFinished,"Event is finished.");require(currentTicket.ticketPrice==SafeMath.div(msg.value,1000000000000000000),"Ether value is not equal ticket price.");updateHolder(ticketId,holderId,holderEthAddress,holderName,holderPhone);}functionbuyTicketByOther(uint256ticketId,bytes32holderId,bytes32holderEthAddress,bytes32holderName,bytes32holderPhone)public{TBdatasets.TicketmemorycurrentTicket=ticketMap[ticketId];require(currentTicket.isTicket==false,"Current ticket is invalid.");TBdatasets.BusinessEventmemorycurrentBuEvent=buEventMap[currentTicket.buEventId];require(currentBuEvent.isBuEvent==false,"Current event is invalid.");require(currentBuEvent.isEventFinished,"Event is finished.");updateHolder(ticketId,holderId,holderEthAddress,holderName,holderPhone);}functiongetTicketByHolderId(bytes32holderId)publicreturns(uint256,uint256,bytes32,uint256,uint256,uint256,bytes32,bytes32,bytes32,bytes32){return(0,0,"",0,0,0,"","","","");}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 71
column: 8
content: stringbuEventName

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 72
column: 8
content: stringbuEventDescription

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 103
column: 8
content: bytes32[]ticketTypeList

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 104
column: 8
content: uint256[]ticketTypeQuantityList

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 105
column: 8
content: uint256[]maxQuantityPerOneList

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 106
column: 8
content: uint256[]ticketPriceList

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 107
column: 8
content: uint256[]minResellList

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 108
column: 8
content: uint256[]maxResellList

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 154
column: 8
content: bytes32[]ticketType

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 155
column: 8
content: uint256[]ticketPrice

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 156
column: 8
content: uint256[]minResell

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 157
column: 8
content: uint256[]maxResell

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 56
column: 4
content: addressmasterAddress;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 57
column: 4
content: mapping(uint256=>TBdatasets.BusinessEvent)buEventMap;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 58
column: 4
content: uint256buEventMapSize;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 59
column: 4
content: mapping(uint256=>TBdatasets.Ticket)ticketMap;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 60
column: 4
content: uint256ticketMapSize;

SOLIDITY_VISIBILITY :5
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_UPGRADE_TO_050 :12
SOLIDITY_GAS_LIMIT_IN_LOOPS :1
