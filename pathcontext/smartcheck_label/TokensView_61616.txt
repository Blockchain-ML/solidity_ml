C:\Users\hp\DataSet\TokensView.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 112
column: 8
content: for(uinti=0;i<_tokenIDs.length;i++){string[]memorystrings=newstring[](3);addresstokenAddress;IArbitrableTokenList.TokenStatusstatus;(strings[0],strings[1],tokenAddress,strings[2],status,)=t2cr.getTokenInfo(_tokenIDs[i]);tokens[i]=Token(_tokenIDs[i],strings[0],strings[1],tokenAddress,strings[2],status,0);uintdecimals;boolsuccess;bytes4sig=bytes4(keccak256("decimals()"));assembly{letx:=mload(0x40)mstore(x,sig)success:=staticcall(30000,tokenAddress,x,0x04,x,0x20)decimals:=mload(x)}if(success&&decimals!=22270923699561257074107342068491755213283769984150504402684791726686939079929){tokens[i].decimals=decimals;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 58
column: 8
content: while(iterators[0]<_tokenAddresses.length){addresstokenAddr=_tokenAddresses[iterators[0]];boolcounting=true;bytes4sig=bytes4(keccak256("addressToSubmissions(address,uint256)"));uintsubmissions=0;while(counting){assembly{letx:=mload(0x40)mstore(x,sig)mstore(add(x,0x04),tokenAddr)mstore(add(x,0x24),submissions)counting:=staticcall(30000,_t2crAddress,x,0x44,x,0x20)}if(counting){submissions++;}}while(iterators[1]<submissions){(,,,,IArbitrableTokenList.TokenStatusstatus,)=t2cr.getTokenInfo(t2cr.addressToSubmissions(tokenAddr,iterators[1]));if(status==IArbitrableTokenList.TokenStatus.Registered||status==IArbitrableTokenList.TokenStatus.ClearingRequested){result[iterators[0]]=t2cr.addressToSubmissions(tokenAddr,iterators[1]);break;}iterators[1]++;}iterators[0]++;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 112
column: 8
content: for(uinti=0;i<_tokenIDs.length;i++){string[]memorystrings=newstring[](3);addresstokenAddress;IArbitrableTokenList.TokenStatusstatus;(strings[0],strings[1],tokenAddress,strings[2],status,)=t2cr.getTokenInfo(_tokenIDs[i]);tokens[i]=Token(_tokenIDs[i],strings[0],strings[1],tokenAddress,strings[2],status,0);uintdecimals;boolsuccess;bytes4sig=bytes4(keccak256("decimals()"));assembly{letx:=mload(0x40)mstore(x,sig)success:=staticcall(30000,tokenAddress,x,0x04,x,0x20)decimals:=mload(x)}if(success&&decimals!=22270923699561257074107342068491755213283769984150504402684791726686939079929){tokens[i].decimals=decimals;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 58
column: 14
content: iterators[0]<_tokenAddresses.length

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 64
column: 18
content: counting

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 86
column: 19
content: iterators[1]<submissions

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 9
column: 16
content: ^

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 51
column: 4
content: functiongetTokensIDsForAddresses(address_t2crAddress,address[]_tokenAddresses)externalviewreturns(bytes32[]memoryresult){IArbitrableTokenListt2cr=IArbitrableTokenList(_t2crAddress);result=newbytes32[](_tokenAddresses.length);uint[2]memoryiterators=[uint(0),uint(0)];while(iterators[0]<_tokenAddresses.length){addresstokenAddr=_tokenAddresses[iterators[0]];boolcounting=true;bytes4sig=bytes4(keccak256("addressToSubmissions(address,uint256)"));uintsubmissions=0;while(counting){assembly{letx:=mload(0x40)mstore(x,sig)mstore(add(x,0x04),tokenAddr)mstore(add(x,0x24),submissions)counting:=staticcall(30000,_t2crAddress,x,0x44,x,0x20)}if(counting){submissions++;}}while(iterators[1]<submissions){(,,,,IArbitrableTokenList.TokenStatusstatus,)=t2cr.getTokenInfo(t2cr.addressToSubmissions(tokenAddr,iterators[1]));if(status==IArbitrableTokenList.TokenStatus.Registered||status==IArbitrableTokenList.TokenStatus.ClearingRequested){result[iterators[0]]=t2cr.addressToSubmissions(tokenAddr,iterators[1]);break;}iterators[1]++;}iterators[0]++;}}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 105
column: 4
content: functiongetTokens(address_t2crAddress,bytes32[]_tokenIDs)externalviewreturns(Token[]memorytokens){IArbitrableTokenListt2cr=IArbitrableTokenList(_t2crAddress);tokens=newToken[](_tokenIDs.length);for(uinti=0;i<_tokenIDs.length;i++){string[]memorystrings=newstring[](3);addresstokenAddress;IArbitrableTokenList.TokenStatusstatus;(strings[0],strings[1],tokenAddress,strings[2],status,)=t2cr.getTokenInfo(_tokenIDs[i]);tokens[i]=Token(_tokenIDs[i],strings[0],strings[1],tokenAddress,strings[2],status,0);uintdecimals;boolsuccess;bytes4sig=bytes4(keccak256("decimals()"));assembly{letx:=mload(0x40)mstore(x,sig)success:=staticcall(30000,tokenAddress,x,0x04,x,0x20)decimals:=mload(x)}if(success&&decimals!=22270923699561257074107342068491755213283769984150504402684791726686939079929){tokens[i].decimals=decimals;}}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 65
column: 16
content: assembly{letx:=mload(0x40)mstore(x,sig)mstore(add(x,0x04),tokenAddr)mstore(add(x,0x24),submissions)counting:=staticcall(30000,_t2crAddress,x,0x44,x,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 149
column: 12
content: assembly{letx:=mload(0x40)mstore(x,sig)success:=staticcall(30000,tokenAddress,x,0x04,x,0x20)decimals:=mload(x)}

SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_GAS_LIMIT_IN_LOOPS :4
SOLIDITY_USING_INLINE_ASSEMBLY :2
SOLIDITY_SHOULD_NOT_BE_VIEW :2
