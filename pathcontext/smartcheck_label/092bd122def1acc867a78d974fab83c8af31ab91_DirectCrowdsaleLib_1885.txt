C:\Users\hp\DataSet\contracts\mainnet\09\092bd122def1acc867a78d974fab83c8af31ab91_DirectCrowdsaleLib.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 470
column: 2
content: functionapprove(addressspender,uint256value)publicreturns(boolok){returntoken.approve(spender,value);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 114
column: 4
content: for(uint256i=0;i<_saleData.length;i+=2){require(_saleData[i]>_tempTime);require(_saleData[i+1]>0);self.milestoneTimes.push(_saleData[i]);self.tokenPrice[_saleData[i]]=_saleData[i+1];_tempTime=_saleData[i];}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 139
column: 8
content: while((self.milestoneTimes.length>self.currentMilestone+1)&&(now>self.milestoneTimes[self.currentMilestone+1])){self.currentMilestone+=1;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 303
column: 4
content: while((index<self.milestoneTimes.length)&&(self.milestoneTimes[index]<timestamp)){index++;}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 343
column: 2
content: functiontimes(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 360
column: 2
content: functiondividedBy(uint256a,uint256b)publicpurereturns(boolerr,uint256i){uint256res;assembly{switchiszero(b)case0{res:=div(a,b)letloc:=mload(0x40)mstore(add(loc,0x20),res)i:=mload(add(loc,0x20))}default{err:=1i:=0}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 383
column: 2
content: functionplus(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 400
column: 2
content: functionminus(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 114
column: 4
content: for(uint256i=0;i<_saleData.length;i+=2){require(_saleData[i]>_tempTime);require(_saleData[i+1]>0);self.milestoneTimes.push(_saleData[i]);self.tokenPrice[_saleData[i]]=_saleData[i+1];_tempTime=_saleData[i];}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 139
column: 14
content: (self.milestoneTimes.length>self.currentMilestone+1)&&(now>self.milestoneTimes[self.currentMilestone+1])

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 303
column: 10
content: (index<self.milestoneTimes.length)&&(self.milestoneTimes[index]<timestamp)

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 343
column: 2
content: functiontimes(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 360
column: 2
content: functiondividedBy(uint256a,uint256b)publicpurereturns(boolerr,uint256i){uint256res;assembly{switchiszero(b)case0{res:=div(a,b)letloc:=mload(0x40)mstore(add(loc,0x20),res)i:=mload(add(loc,0x20))}default{err:=1i:=0}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 383
column: 2
content: functionplus(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 400
column: 2
content: functionminus(uint256a,uint256b)publicpurereturns(boolerr,uint256res){assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}}

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 94
column: 16
content: uint256[]_saleData

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 424
column: 26
content: stringname

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 425
column: 26
content: stringsymbol

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 434
column: 39
content: string

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 438
column: 41
content: string

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 553
column: 16
content: string_name

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 554
column: 16
content: string_symbol

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 344
column: 4
content: assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 362
column: 4
content: assembly{switchiszero(b)case0{res:=div(a,b)letloc:=mload(0x40)mstore(add(loc,0x20),res)i:=mload(add(loc,0x20))}default{err:=1i:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 384
column: 4
content: assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 401
column: 4
content: assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}

SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :4
SOLIDITY_EXTRA_GAS_IN_LOOPS :3
SOLIDITY_UPGRADE_TO_050 :7
SOLIDITY_GAS_LIMIT_IN_LOOPS :3
SOLIDITY_USING_INLINE_ASSEMBLY :4
SOLIDITY_SHOULD_NOT_BE_PURE :4
SOLIDITY_ERC20_APPROVE :1
