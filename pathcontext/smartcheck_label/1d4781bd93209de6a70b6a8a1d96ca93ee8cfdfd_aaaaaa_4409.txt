C:\Users\hp\DataSet\contracts\mainnet\1d\1d4781bd93209de6a70b6a8a1d96ca93ee8cfdfd_aaaaaa.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 61
column: 8
content: newOwner=address(0)

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 120
column: 32
content: balances[address(0)]

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 134
column: 30
content: 0x0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 152
column: 30
content: 0x0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 190
column: 30
content: 0x0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 194
column: 25
content: 0x0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 194
column: 50
content: 0x0

ruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 140
column: 4
content: functionapprove(addressspender,uinttokens)publicwhenNotPausednotBlockedreturns(boolsuccess){require(balances[msg.sender]>=tokens,"Insufficient amount of tokens");allowed[msg.sender][spender]=tokens;emitApproval(msg.sender,spender,tokens);returntrue;}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 83
column: 0
content: contractaaaaaaisERC20Interface,Owned,Pausable{usingSafeMathforuint;mapping(address=>uint)balances;mapping(address=>mapping(address=>uint))allowed;mapping(address=>uint)blockedTime;uint_totalSupply;stringpublicsymbol;stringpublicname;uint8publicdecimals;uintpublicownersRemaining;eventPause(addressindexedsender);eventUnpause(addressindexedsender);eventBurn(addressindexedfrom,addressindexedto,uinttokens,addressindexedsender);eventMint(uinttokenIncrease,addressindexedsender);constructor()public{symbol="IZT";name="iZiFinance Token";decimals=0;_totalSupply=10000000;balances[owner]=_totalSupply;ownersRemaining=3;emitTransfer(address(0),owner,_totalSupply);}modifiernotBlocked(){require(blockedTime[msg.sender]<=now,"Blocked: There still blocked time remaining");_;}functiontotalSupply()publicviewreturns(uint){return_totalSupply.sub(balances[address(0)]);}functionbalanceOf(addresstokenOwner)publicviewreturns(uintbalance){returnbalances[tokenOwner];}functionallowance(addresstokenOwner,addressspender)publicviewreturns(uintremaining){returnallowed[tokenOwner][spender];}functiontransfer(addressto,uinttokens)publicwhenNotPausednotBlockedreturns(boolsuccess){require(balances[msg.sender]>=tokens,"Insufficient balance");require(tokens>0,"Can&#39;t send a negative amount of tokens");require(to!=address(0x0),"Can&#39;t send to a null address");executeTransfer(msg.sender,to,tokens);emitTransfer(msg.sender,to,tokens);returntrue;}functionapprove(addressspender,uinttokens)publicwhenNotPausednotBlockedreturns(boolsuccess){require(balances[msg.sender]>=tokens,"Insufficient amount of tokens");allowed[msg.sender][spender]=tokens;emitApproval(msg.sender,spender,tokens);returntrue;}functiontransferFrom(addressfrom,addressto,uinttokens)publicwhenNotPausednotBlockedreturns(boolsuccess){require(balances[from]>=tokens,"Insufficient balance");require(allowed[from][msg.sender]>=tokens,"Insufficient allowance");require(tokens>0,"Can&#39;t send a negative amount of tokens");require(to!=address(0x0),"Can&#39;t send to a null address");executeTransfer(from,to,tokens);allowed[from][msg.sender]=allowed[from][msg.sender].sub(tokens);emitTransfer(msg.sender,to,tokens);returntrue;}functionexecuteTransfer(addressfrom,addressto,uinttokens)private{uintpreviousBalances=balances[from]+balances[to];balances[from]=balances[from].sub(tokens);balances[to]=balances[to].add(tokens);require((balances[from]+balances[to]==previousBalances),"The balance overflowed");}functionpause()publiconlyOwnerwhenNotPaused{_paused=true;emitPause(msg.sender);}functionunpause()publiconlyOwnerwhenPaused{_paused=false;emitUnpause(msg.sender);}functionmint(uinttokenIncrease)publicwhenNotPausedonlyOwner{require(tokenIncrease>0,"Can&#39;t mint a negative number");uintoldTotalSupply=_totalSupply;_totalSupply=_totalSupply.add(tokenIncrease);balances[owner]=balances[owner].add(tokenIncrease);emitMint(tokenIncrease,msg.sender);require(_totalSupply>oldTotalSupply,"Total supply overflowed");}functionburnTokens(addressfrom,addressto)publicwhenNotPausedonlyOwner{require(to!=address(0x0),"Can&#39;t send to a null address");uintpreviousBalances=balances[from]+balances[to];uintoldbalance=balanceOf(from);balances[from]=balances[from].sub(oldbalance);balances[address(0x0)]=balances[address(0x0)].add(oldbalance);emitTransfer(from,address(0x0),oldbalance);mint(oldbalance);balances[owner]=balances[owner].sub(oldbalance);balances[to]=balances[to].add(oldbalance);emitBurn(from,to,oldbalance,msg.sender);require((balances[from]+balances[to]==previousBalances),"The balance overflowed");}functionsendToOwners(addressto,uintvalue)publicwhenNotPausedonlyOwner{require(ownersRemaining>0,"All initial owners were already set");uintoldUsers=ownersRemaining;executeTransfer(owner,to,value);blockedTime[to]=now+1095days;ownersRemaining=ownersRemaining-1;emitTransfer(owner,to,value);assert(ownersRemaining<oldUsers);}functionseeBlockedTime(addressadressBlocked)publicviewreturns(uint){returnblockedTime[adressBlocked];}functionseeNow()publicviewreturns(uint){returnnow;}function()externalpayable{revert();}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 5
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 5
column: 25
content: <

ruleId: SOLIDITY_REDUNDANT_FALLBACK_REJECT
patternId: b85a32
severity: 1
line: 223
column: 33
content: {revert();}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 85
column: 4
content: usingSafeMathforuint;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 87
column: 4
content: mapping(address=>uint)balances;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 88
column: 4
content: mapping(address=>mapping(address=>uint))allowed;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 89
column: 4
content: mapping(address=>uint)blockedTime;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 91
column: 4
content: uint_totalSupply;

SOLIDITY_VISIBILITY :4
SOLIDITY_SAFEMATH :1
SOLIDITY_PRAGMAS_VERSION :2
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_ADDRESS_HARDCODED :7
SOLIDITY_REDUNDANT_FALLBACK_REJECT :1
SOLIDITY_ERC20_APPROVE :1
