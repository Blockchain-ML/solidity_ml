C:\Users\hp\DataSet\CrowdsaleDAO.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 98
column: 4
content: functionisParticipant(address_participantAddress)externalconstantreturns(bool){returntoken.balanceOf(_participantAddress)>0;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 226
column: 8
content: for(uinti=0;i<_team.length;i++){teamMap[_team[i]]=true;teamBonuses[_team[i]]=_tokenPercents[i];}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 246
column: 8
content: for(uinti=0;i<_addresses.length;i++){whiteList[_addresses[i]]=true;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 226
column: 8
content: for(uinti=0;i<_team.length;i++){teamMap[_team[i]]=true;teamBonuses[_team[i]]=_tokenPercents[i];}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 246
column: 8
content: for(uinti=0;i<_addresses.length;i++){whiteList[_addresses[i]]=true;}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 9
column: 0
content: contractCrowdsaleDAOisCrowdsaleDAOFields,Owned{addresspublicstateModule;addresspublicpaymentModule;addresspublicvotingDecisionModule;addresspubliccrowdsaleModule;functionCrowdsaleDAO(string_name,string_description,address_serviceContractAddress,address_votingFactoryContractAddress)Owned(msg.sender){(name,description,serviceContract,votingFactory)=(_name,_description,_serviceContractAddress,VotingFactoryInterface(_votingFactoryContractAddress));}function()payable{DAOProxy.delegatedHandlePayment(crowdsaleModule,msg.sender,false);}functionhandleCommissionPayment(address_sender)payable{DAOProxy.delegatedHandlePayment(crowdsaleModule,_sender,true);}functionhandleDXCPayment(address_from,uint_amount){DAOProxy.delegatedHandleDXCPayment(crowdsaleModule,_from,_amount);}functionwithdrawal(address_address,uint_withdrawalSum,bool_dxc)external{DAOProxy.delegatedWithdrawal(votingDecisionModule,_address,_withdrawalSum,_dxc);}functionmakeRefundableByVotingDecision()external{DAOProxy.delegatedMakeRefundableByVotingDecision(votingDecisionModule);}functionholdTokens(address_address,uint_duration)external{DAOProxy.delegatedHoldTokens(votingDecisionModule,_address,_duration);}functionsetStateModule(address_stateModule)externalcanSetAddress(stateModule){stateModule=_stateModule;}functionsetPaymentModule(address_paymentModule)externalcanSetAddress(paymentModule){paymentModule=_paymentModule;}functionsetVotingDecisionModule(address_votingDecisionModule)externalcanSetAddress(votingDecisionModule){votingDecisionModule=_votingDecisionModule;}functionsetCrowdsaleModule(address_crowdsaleModule)externalcanSetAddress(crowdsaleModule){crowdsaleModule=_crowdsaleModule;}functionsetVotingFactoryAddress(address_votingFactory)externalcanSetAddress(votingFactory){votingFactory=VotingFactoryInterface(_votingFactory);}functionisParticipant(address_participantAddress)externalconstantreturns(bool){returntoken.balanceOf(_participantAddress)>0;}functioninitState(address_tokenAddress,address_DXC)public{DAOProxy.delegatedInitState(stateModule,_tokenAddress,_DXC);}functioninitCrowdsaleParameters(uint_softCap,uint_hardCap,uint_etherRate,uint_DXCRate,uint_startTime,uint_endTime,bool_dxcPayments,uint_lockup)public{DAOProxy.delegatedInitCrowdsaleParameters(crowdsaleModule,_softCap,_hardCap,_etherRate,_DXCRate,_startTime,_endTime,_dxcPayments,_lockup);}functionaddRegular(string_name,string_description,uint_duration,bytes32[]_options)public{votings[DAOLib.delegatedCreateRegular(votingFactory,_name,_description,_duration,_options,this)]=true;}functionaddWithdrawal(string_name,string_description,uint_duration,uint_sum,address_withdrawalWallet,bool_dxc)public{votings[DAOLib.delegatedCreateWithdrawal(votingFactory,_name,_description,_duration,_sum,_withdrawalWallet,_dxc,this)]=true;}functionaddRefund(string_name,string_description,uint_duration)public{votings[DAOLib.delegatedCreateRefund(votingFactory,_name,_description,_duration,this)]=true;}functionaddModule(string_name,string_description,uint_duration,uint_module,address_newAddress)public{votings[DAOLib.delegatedCreateModule(votingFactory,_name,_description,_duration,_module,_newAddress,this)]=true;}functionmakeRefundableByUser()public{DAOProxy.delegatedMakeRefundableByUser(votingDecisionModule);}functionrefund()public{DAOProxy.delegatedRefund(paymentModule);}functionrefundSoftCap()public{DAOProxy.delegatedRefundSoftCap(paymentModule);}functionfinish()public{DAOProxy.delegatedFinish(crowdsaleModule);}functioninitBonuses(address[]_team,uint[]_tokenPercents,uint[]_bonusPeriods,uint[]_bonusEtherRates,uint[]_bonusDXCRates,uint[]_teamHold,bool[]_service)publiconlyOwner(msg.sender){require(_team.length==_tokenPercents.length&&_team.length==_teamHold.length&&_team.length==_service.length&&_bonusPeriods.length==_bonusEtherRates.length&&(_bonusDXCRates.length==0||_bonusPeriods.length==_bonusDXCRates.length)&&canInitBonuses&&(block.timestamp<startTime||canInitCrowdsaleParameters));team=_team;teamHold=_teamHold;teamBonusesArr=_tokenPercents;teamServiceMember=_service;for(uinti=0;i<_team.length;i++){teamMap[_team[i]]=true;teamBonuses[_team[i]]=_tokenPercents[i];}bonusPeriods=_bonusPeriods;bonusEtherRates=_bonusEtherRates;bonusDXCRates=_bonusDXCRates;canInitBonuses=false;}functionsetWhiteList(address[]_addresses)publiconlyOwner(msg.sender){require(canSetWhiteList);whiteListArr=_addresses;for(uinti=0;i<_addresses.length;i++){whiteList[_addresses[i]]=true;}canSetWhiteList=false;}modifiercanSetAddress(addressmodule){require(votings[msg.sender]||(module==0x0&&msg.sender==owner));_;}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 133
column: 24
content: string_name

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 133
column: 38
content: string_description

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 133
column: 75
content: bytes32[]_options

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 146
column: 27
content: string_name

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 146
column: 41
content: string_description

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 156
column: 23
content: string_name

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 156
column: 37
content: string_description

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 168
column: 23
content: string_name

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 168
column: 37
content: string_description

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 210
column: 25
content: address[]_team

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 210
column: 42
content: uint[]_tokenPercents

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 210
column: 65
content: uint[]_bonusPeriods

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 210
column: 87
content: uint[]_bonusEtherRates

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 210
column: 112
content: uint[]_bonusDXCRates

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 210
column: 135
content: uint[]_teamHold

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 210
column: 153
content: bool[]_service

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 242
column: 26
content: address[]_addresses

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 15
column: 4
content: functionCrowdsaleDAO(string_name,string_description,address_serviceContractAddress,address_votingFactoryContractAddress)Owned(msg.sender){(name,description,serviceContract,votingFactory)=(_name,_description,_serviceContractAddress,VotingFactoryInterface(_votingFactoryContractAddress));}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 23
column: 4
content: function()payable{DAOProxy.delegatedHandlePayment(crowdsaleModule,msg.sender,false);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 32
column: 4
content: functionhandleCommissionPayment(address_sender)payable{DAOProxy.delegatedHandlePayment(crowdsaleModule,_sender,true);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 42
column: 4
content: functionhandleDXCPayment(address_from,uint_amount){DAOProxy.delegatedHandleDXCPayment(crowdsaleModule,_from,_amount);}

SOLIDITY_VISIBILITY :4
SOLIDITY_DEPRECATED_CONSTRUCTIONS :1
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_UPGRADE_TO_050 :17
SOLIDITY_GAS_LIMIT_IN_LOOPS :2
