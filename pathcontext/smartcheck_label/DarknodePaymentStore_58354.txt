C:\Users\hp\DataSet\DarknodePaymentStore.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: adc165
severity: 1
line: 21
column: 39
content: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 13
column: 0
content: contractDarknodePaymentStoreisClaimable{usingSafeMathforuint256;usingSafeERC20forERC20;usingERC20WithFeesforERC20;stringpublicVERSION;addressconstantpublicETHEREUM=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;mapping(address=>mapping(address=>uint256))publicdarknodeBalances;mapping(address=>uint256)publiclockedBalances;constructor(stringmemory_VERSION)public{VERSION=_VERSION;}function()externalpayable{}functiontotalBalance(address_token)publicviewreturns(uint256){if(_token==ETHEREUM){returnaddress(this).balance;}else{returnERC20(_token).balanceOf(address(this));}}functionavailableBalance(address_token)publicviewreturns(uint256){returntotalBalance(_token).sub(lockedBalances[_token]);}functionincrementDarknodeBalance(address_darknode,address_token,uint256_amount)externalonlyOwner{require(_amount>0,"DarknodePaymentStore: invalid amount");require(availableBalance(_token)>=_amount,"DarknodePaymentStore: insufficient contract balance");darknodeBalances[_darknode][_token]=darknodeBalances[_darknode][_token].add(_amount);lockedBalances[_token]=lockedBalances[_token].add(_amount);}functiontransfer(address_darknode,address_token,uint256_amount,address<missing ')'>payable_recipient)externalonlyOwner{require(darknodeBalances[_darknode][_token]>=_amount,"DarknodePaymentStore: insufficient darknode balance");darknodeBalances[_darknode][_token]=darknodeBalances[_darknode][_token].sub(_amount);lockedBalances[_token]=lockedBalances[_token].sub(_amount);if(_token==ETHEREUM){_recipient.transfer(_amount);}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 14
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 84
column: 4
content: functiontransfer(address_darknode,address_token,uint256_amount,address<missing ')'>payable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 85
column: 8
content: require(darknodeBalances[

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 85
column: 33
content: _darknode][

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 85
column: 44
content: _token]>=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 85
column: 55
content: _amount,"DarknodePaymentStore: insufficient darknode balance");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 86
column: 8
content: darknodeBalances[_darknode][_token]=darknodeBalances[

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 86
column: 63
content: _darknode][

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 86
column: 74
content: _token].

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 86
column: 82
content: sub(_amount);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 87
column: 8
content: lockedBalances[_token]=lockedBalances[

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 87
column: 48
content: _token].

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 87
column: 56
content: sub(_amount);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 89
column: 11
content: (_token==ETHEREUM){

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 90
column: 12
content: _recipient.transfer(_amount);

SOLIDITY_VISIBILITY :14
SOLIDITY_SAFEMATH :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_ADDRESS_HARDCODED :1
