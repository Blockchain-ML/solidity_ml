F:\Blockchain\dataset_new_byID\72054.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 85
column: 8
content: for(uint256i=0;i<nAccounts;++i){accounts[i]=IDydx.AccountInfo({owner:accountOwner,number:accountNumbers[i]});}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 110
column: 8
content: for(uint256i=0;i<nBridgeActions;++i){BridgeActionmemorybridgeAction=bridgeActions[i];uint256scaledAmount;if(bridgeAction.conversionRateDenominator>0){scaledAmount=LibMath.safeGetPartialAmountFloor(bridgeAction.conversionRateNumerator,bridgeAction.conversionRateDenominator,amount);}else{scaledAmount=amount;}if(bridgeAction.actionType==BridgeActionType.Deposit){actions[i]=_createDepositAction(depositFrom,scaledAmount,bridgeAction);}elseif(bridgeAction.actionType==BridgeActionType.Withdraw){actions[i]=_createWithdrawAction(withdrawTo,scaledAmount,bridgeAction);}else{revert("DydxBridge/UNRECOGNIZED_BRIDGE_ACTION");}}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 134
column: 19
content: if(bridgeAction.actionType==BridgeActionType.Withdraw){actions[i]=_createWithdrawAction(withdrawTo,scaledAmount,bridgeAction);}else{revert("DydxBridge/UNRECOGNIZED_BRIDGE_ACTION");}

SOLIDITY_REVERT_REQUIRE :1
SOLIDITY_GAS_LIMIT_IN_LOOPS :2
