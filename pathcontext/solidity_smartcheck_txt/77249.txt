F:\Blockchain\dataset_new_byID\77249.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 125
column: 43
content: 0x61

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 127
column: 43
content: 0x69

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 129
column: 43
content: 0x01

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 131
column: 43
content: 0x42

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 133
column: 43
content: 0xff

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 25
column: 6
content: for(uinti=0;i<_a.length;i++){Assert.equal(_a[i],_b[i],"A character is different.");}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 51
column: 4
content: functiontestZero()returns(bool){bytesmemorya="";uintexpected=0;Assert.equal(a.toSlice().len(),expected,"Error Message");}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 25
column: 6
content: for(uinti=0;i<_a.length;i++){Assert.equal(_a[i],_b[i],"A character is different.");}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 42
column: 42
content: stringb

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 46
column: 43
content: bytesb

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 23
column: 4
content: functionmyassertEq(bytesmemory_a,bytesmemory_b){Assert.equal(_a.length,_b.length,"Lengths are different.");for(uinti=0;i<_a.length;i++){Assert.equal(_a[i],_b[i],"A character is different.");}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 30
column: 4
content: functionmyassertEq(stringmemorya,stringmemoryb){bytesmemory_a=bytes(a);bytesmemory_b=bytes(b);myassertEq(_a,_b);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 51
column: 4
content: functiontestZero()returns(bool){bytesmemorya="";uintexpected=0;Assert.equal(a.toSlice().len(),expected,"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 61
column: 4
content: functiontestToSliceB32(){bytesmemoryx="foobar";assertEq(bytes32("foobar").toSliceB32(),x.toSlice());}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 67
column: 4
content: functiontestCopy(){bytesmemorytest="Hello, world!";vars1=test.toSlice();vars2=s1.copy();s1._len=0;Assert.equal(s2._len,test.length,"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 76
column: 4
content: functiontestLen(){bytesmemorytest="";Assert.equal(test.toSlice().len(),0,"Error Message");test="Hello, world!";Assert.equal(test.toSlice().len(),13,"Error Message");test="\x00\x01\x02\x03\x04";Assert.equal(test.toSlice().len(),5,"Error Message");test="test\r\ntest\r\n";Assert.equal(test.toSlice().len(),12,"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 88
column: 4
content: functiontestEmpty(){bytesmemorytest="";Assert.isTrue(test.toSlice().empty(),"Error Message");test="\x00";Assert.isFalse(test.toSlice().empty(),"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 95
column: 4
content: functiontestEquals(){bytesmemorytest="";bytesmemorytest1="foo";bytesmemorytest2="foo";bytesmemorytest3="bar";Assert.isTrue(test.toSlice().equals(test.toSlice()),"Error Message");Assert.isTrue(test1.toSlice().equals(test2.toSlice()),"Error Message");Assert.isTrue(test3.toSlice().equals(test3.toSlice()),"Error Message");Assert.isFalse(test2.toSlice().equals(test3.toSlice()),"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 107
column: 4
content: functiontestNextRune(){bytesmemorytest="\xffa\x00\x20h";vars=test.toSlice();assertEqB(s.nextRune(),"\xff");assertEqB(s,"a\x00\x20h");assertEqB(s.nextRune(),"a");assertEqB(s,"\x00\x20h");assertEqB(s.nextRune(),"\x00");assertEqB(s,"\x20h");assertEqB(s.nextRune(),"\x20");assertEqB(s,"h");assertEqB(s.nextRune(),"h");assertEqB(s,"");assertEqB(s.nextRune(),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 123
column: 4
content: functiontestOrd(){bytesmemorytest="a";Assert.equal(test.toSlice().ord(),0x61,"Error Message");test="i";Assert.equal(test.toSlice().ord(),0x69,"Error Message");test="\x01";Assert.equal(test.toSlice().ord(),0x01,"Error Message");test="\x42";Assert.equal(test.toSlice().ord(),0x42,"Error Message");test="\xff";Assert.equal(test.toSlice().ord(),0xff,"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 136
column: 4
content: functiontestCompare(){bytesmemorytest0="foobie";bytesmemorytest1="foobif";bytesmemorytest2="foobid";bytesmemorytest3="foobies";bytesmemorytest4="foobi";bytesmemorytest5="doobie";bytesmemorytest6="01234567890123456789012345678901";bytesmemorytest7="012345678901234567890123456789012";Assert.equal(test0.toSlice().compare(test0.toSlice()),0,"Error Message");Assert.equal(sign(test0.toSlice().compare(test1.toSlice())),-1,"Error Message");Assert.equal(sign(test0.toSlice().compare(test2.toSlice())),1,"Error Message");Assert.equal(sign(test0.toSlice().compare(test3.toSlice())),-1,"Error Message");Assert.equal(sign(test0.toSlice().compare(test4.toSlice())),1,"Error Message");Assert.equal(sign(test0.toSlice().compare(test5.toSlice())),1,"Error Message");Assert.equal(sign(test6.toSlice().compare(test7.toSlice())),-1,"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 155
column: 4
content: functiontestCompare2(){bytesmemorytest8="foo.bar";bytesmemorytest9=".";bytesmemorytest10="foo";Assert.equal(test8.toSlice().split(test9.toSlice()).compare(test10.toSlice()),0,"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 163
column: 4
content: functiontestStartsWith(){bytesmemorytest0="foobar";bytesmemorytest1="foo";bytesmemorytest2="oob";bytesmemorytest3="";vars=test0.toSlice();Assert.isTrue(s.startsWith(test1.toSlice()),"Error Message");Assert.isFalse(s.startsWith(test2.toSlice()),"Error Message");Assert.isTrue(s.startsWith(test3.toSlice()),"Error Message");Assert.isTrue(s.startsWith(s.copy().rfind(test1.toSlice())),"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 175
column: 4
content: functiontestBeyond(){bytesmemorytest0="foobar";bytesmemorytest1="foo";bytesmemorytest2="bar";vars=test0.toSlice();assertEqB(s.beyond(test1.toSlice()),test2);assertEqB(s,test2);assertEqB(s.beyond(test1.toSlice()),test2);assertEqB(s.beyond(test2.toSlice()),"");assertEqB(s,"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 187
column: 4
content: functiontestEndsWith(){bytesmemorytest0="foobar";bytesmemorytest1="oba";bytesmemorytest2="bar";bytesmemorytest3="";vars=test0.toSlice();Assert.isTrue(s.endsWith(test2.toSlice()),"Error Message");Assert.isFalse(s.endsWith(test1.toSlice()),"Error Message");Assert.isTrue(s.endsWith(test3.toSlice()),"Error Message");Assert.isTrue(s.endsWith(s.copy().find(test2.toSlice())),"Error Message");}

SOLIDITY_VISIBILITY :15
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_ADDRESS_HARDCODED :5
SOLIDITY_UPGRADE_TO_050 :2
SOLIDITY_GAS_LIMIT_IN_LOOPS :1
