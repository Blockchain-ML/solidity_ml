F:\Blockchain\dataset_new_byID\73974.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 130
column: 8
content: for(uint256i=0;i<exchanges.length;i++){exchanges[i]=Trading(trading).exchanges(i);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 136
column: 8
content: for(uint256i=0;i<ownedAssets.length;i++){totalQuantity=ERC20(ownedAssets[i]).balanceOf(vault);totalQuantity+=ERC20(ownedAssets[i]).balanceOf(trading);for(uint256j=0;j<exchanges.length;j++){orderId=Trading(trading).exchangesToOpenMakeOrders(exchanges[j].exchange,ownedAssets[i]).id;if(orderId==0){continue;}(,,remainingSellQuantity)=ExchangeAdapter(exchanges[j].adapter).getOrder(exchanges[j].exchange,orderId,ownedAssets[i]);if(exchanges[j].takesCustody){totalQuantity+=remainingSellQuantity;}}underlyingTokens[i]=Component({token:ownedAssets[i],tokenType:"ERC20",rate:totalQuantity*1e18/totalSupply});}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 140
column: 12
content: for(uint256j=0;j<exchanges.length;j++){orderId=Trading(trading).exchangesToOpenMakeOrders(exchanges[j].exchange,ownedAssets[i]).id;if(orderId==0){continue;}(,,remainingSellQuantity)=ExchangeAdapter(exchanges[j].adapter).getOrder(exchanges[j].exchange,orderId,ownedAssets[i]);if(exchanges[j].takesCustody){totalQuantity+=remainingSellQuantity;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 130
column: 8
content: for(uint256i=0;i<exchanges.length;i++){exchanges[i]=Trading(trading).exchanges(i);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 136
column: 8
content: for(uint256i=0;i<ownedAssets.length;i++){totalQuantity=ERC20(ownedAssets[i]).balanceOf(vault);totalQuantity+=ERC20(ownedAssets[i]).balanceOf(trading);for(uint256j=0;j<exchanges.length;j++){orderId=Trading(trading).exchangesToOpenMakeOrders(exchanges[j].exchange,ownedAssets[i]).id;if(orderId==0){continue;}(,,remainingSellQuantity)=ExchangeAdapter(exchanges[j].adapter).getOrder(exchanges[j].exchange,orderId,ownedAssets[i]);if(exchanges[j].takesCustody){totalQuantity+=remainingSellQuantity;}}underlyingTokens[i]=Component({token:ownedAssets[i],tokenType:"ERC20",rate:totalQuantity*1e18/totalSupply});}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 140
column: 12
content: for(uint256j=0;j<exchanges.length;j++){orderId=Trading(trading).exchangesToOpenMakeOrders(exchanges[j].exchange,ownedAssets[i]).id;if(orderId==0){continue;}(,,remainingSellQuantity)=ExchangeAdapter(exchanges[j].adapter).getOrder(exchanges[j].exchange,orderId,ownedAssets[i]);if(exchanges[j].takesCustody){totalQuantity+=remainingSellQuantity;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 118
column: 15
content: result

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 82
column: 16
content: (address,address,uint)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 119
column: 33
content: staticcall(abi.encodeWithSelector(Trading(trading).exchanges.selector,counter))

SOLIDITY_EXTRA_GAS_IN_LOOPS :3
SOLIDITY_GAS_LIMIT_IN_LOOPS :4
SOLIDITY_UNCHECKED_CALL :1
SOLIDITY_SHOULD_RETURN_STRUCT :1
