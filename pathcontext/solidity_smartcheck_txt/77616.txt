F:\Blockchain\dataset_new_byID\77616.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 67
column: 38
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 67
column: 53
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 71
column: 38
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 71
column: 53
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 75
column: 37
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 75
column: 52
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 79
column: 37
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 79
column: 52
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 82
column: 2
content: functionboolToBytes32(bool_value)constantreturns(bytes32){if(_value==true){returnbytes32(uint(1));}else{returnbytes32(uint(0));}}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 3
column: 0
content: contractTest{function()payable{}functionsetup(){}functionbeforeEach(){}functionafterEach(){}functionassertTrue(bool_testValue,string_message){AssertEqLog("AssertTrue","bool",boolToBytes32(_testValue),boolToBytes32(true),_message);}functionassertTrue(bool_testValue){AssertEqLog("AssertTrue","bool",boolToBytes32(_testValue),boolToBytes32(true),"");}functionassertFalse(bool_testValue,string_message){AssertEqLog("AssertFalse","bool",boolToBytes32(_testValue),boolToBytes32(false),_message);}functionassertFalse(bool_testValue){AssertEqLog("AssertFalse","bool",boolToBytes32(_testValue),boolToBytes32(false),"");}functionassertEq(uint_actual,uint_expected){AssertEqLog("AssertEq","uint",bytes32(_actual),bytes32(_expected),"");}functionassertEq(bytes32_actual,bytes32_expected){AssertEqLog("AssertEq","bytes32",_actual,_expected,"");}functionassertEq(bytes32_actual,bytes32_expected,string_message){AssertEqLog("AssertEq","bytes32",_actual,_expected,_message);}functionassertEq(int_actual,int_expected){AssertEqLog("AssertEq","int",bytes32(_actual),bytes32(_expected),"");}functionassertEq(int_actual,int_expected,string_message){AssertEqLog("AssertEq","int",bytes32(_actual),bytes32(_expected),_message);}functionassertEq(address_actual,address_expected){AssertEqLog("AssertEq","address",bytes32(_actual),bytes32(_expected),"");}functionassertEq(bool_actual,bool_expected){AssertEqLog("AssertEq","bool",boolToBytes32(_actual),boolToBytes32(_expected),"");}functionassertEq(uint_actual,uint_expected,string_message){AssertEqLog("AssertEq","uint",bytes32(_actual),bytes32(_expected),_message);}functionassertEq(address_actual,address_expected,string_message){AssertEqLog("AssertEq","address",bytes32(_actual),bytes32(_expected),_message);}functionassertEq(bool_actual,bool_expected,string_message){AssertEqLog("AssertEq","bool",boolToBytes32(_actual),boolToBytes32(_expected),_message);}functionassertEq(string_actual,string_expected){AssertEqLog("AssertEq","string",sha3(_actual),sha3(_expected),"");}functionassertEq(string_actual,string_expected,string_message){AssertEqLog("AssertEq","string",sha3(_actual),sha3(_expected),_message);}functionassertEq(bytes_actual,bytes_expected){AssertEqLog("AssertEq","bytes",sha3(_actual),sha3(_expected),"");}functionassertEq(bytes_actual,bytes_expected,string_message){AssertEqLog("AssertEq","bytes",sha3(_actual),sha3(_expected),"");}functionboolToBytes32(bool_value)constantreturns(bytes32){if(_value==true){returnbytes32(uint(1));}else{returnbytes32(uint(0));}}eventlog_uint(uint256_logValue,string_message);eventAssertEqLog(string_assertType,string_type,bytes32_actualValue,bytes32_expectedValue,string_message);}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 4
column: 2
content: function()payable{}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 6
column: 2
content: functionsetup(){}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 7
column: 2
content: functionbeforeEach(){}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 8
column: 2
content: functionafterEach(){}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 10
column: 2
content: functionassertTrue(bool_testValue,string_message){AssertEqLog("AssertTrue","bool",boolToBytes32(_testValue),boolToBytes32(true),_message);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 14
column: 2
content: functionassertTrue(bool_testValue){AssertEqLog("AssertTrue","bool",boolToBytes32(_testValue),boolToBytes32(true),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 18
column: 2
content: functionassertFalse(bool_testValue,string_message){AssertEqLog("AssertFalse","bool",boolToBytes32(_testValue),boolToBytes32(false),_message);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 22
column: 2
content: functionassertFalse(bool_testValue){AssertEqLog("AssertFalse","bool",boolToBytes32(_testValue),boolToBytes32(false),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 26
column: 2
content: functionassertEq(uint_actual,uint_expected){AssertEqLog("AssertEq","uint",bytes32(_actual),bytes32(_expected),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 30
column: 2
content: functionassertEq(bytes32_actual,bytes32_expected){AssertEqLog("AssertEq","bytes32",_actual,_expected,"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 34
column: 2
content: functionassertEq(bytes32_actual,bytes32_expected,string_message){AssertEqLog("AssertEq","bytes32",_actual,_expected,_message);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 38
column: 2
content: functionassertEq(int_actual,int_expected){AssertEqLog("AssertEq","int",bytes32(_actual),bytes32(_expected),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 42
column: 2
content: functionassertEq(int_actual,int_expected,string_message){AssertEqLog("AssertEq","int",bytes32(_actual),bytes32(_expected),_message);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 46
column: 2
content: functionassertEq(address_actual,address_expected){AssertEqLog("AssertEq","address",bytes32(_actual),bytes32(_expected),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 50
column: 2
content: functionassertEq(bool_actual,bool_expected){AssertEqLog("AssertEq","bool",boolToBytes32(_actual),boolToBytes32(_expected),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 54
column: 2
content: functionassertEq(uint_actual,uint_expected,string_message){AssertEqLog("AssertEq","uint",bytes32(_actual),bytes32(_expected),_message);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 58
column: 2
content: functionassertEq(address_actual,address_expected,string_message){AssertEqLog("AssertEq","address",bytes32(_actual),bytes32(_expected),_message);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 62
column: 2
content: functionassertEq(bool_actual,bool_expected,string_message){AssertEqLog("AssertEq","bool",boolToBytes32(_actual),boolToBytes32(_expected),_message);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 66
column: 2
content: functionassertEq(string_actual,string_expected){AssertEqLog("AssertEq","string",sha3(_actual),sha3(_expected),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 70
column: 2
content: functionassertEq(string_actual,string_expected,string_message){AssertEqLog("AssertEq","string",sha3(_actual),sha3(_expected),_message);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 74
column: 2
content: functionassertEq(bytes_actual,bytes_expected){AssertEqLog("AssertEq","bytes",sha3(_actual),sha3(_expected),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 78
column: 2
content: functionassertEq(bytes_actual,bytes_expected,string_message){AssertEqLog("AssertEq","bytes",sha3(_actual),sha3(_expected),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 82
column: 2
content: functionboolToBytes32(bool_value)constantreturns(bytes32){if(_value==true){returnbytes32(uint(1));}else{returnbytes32(uint(0));}}

SOLIDITY_VISIBILITY :23
SOLIDITY_DEPRECATED_CONSTRUCTIONS :9
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
