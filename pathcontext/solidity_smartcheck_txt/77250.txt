F:\Blockchain\dataset_new_byID\77250.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 25
column: 6
content: for(uinti=0;i<_a.length;i++){Assert.equal(_a[i],_b[i],"Error Message");}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 25
column: 6
content: for(uinti=0;i<_a.length;i++){Assert.equal(_a[i],_b[i],"Error Message");}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 42
column: 42
content: stringb

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 46
column: 43
content: bytesb

ruleId: SOLIDITY_VAR
patternId: d28aa7
severity: 2
line: 141
column: 8
content: varparts=newbytesutils.slice[](4)

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 23
column: 4
content: functionmyassertEq(bytesmemory_a,bytesmemory_b){Assert.equal(_a.length,_b.length,"Error Message");for(uinti=0;i<_a.length;i++){Assert.equal(_a[i],_b[i],"Error Message");}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 30
column: 4
content: functionmyassertEq(stringmemorya,stringmemoryb){bytesmemory_a=bytes(a);bytesmemory_b=bytes(b);myassertEq(_a,_b);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 51
column: 4
content: functiontestUntil(){bytesmemorytest0="foobar";bytesmemorytest1="foo";bytesmemorytest2="bar";bytesmemorytest3="";bytesutils.slicememorys=test0.toSlice();assertEqB(s.until(test2.toSlice()),test1);assertEqB(s,test1);assertEqB(s.until(test2.toSlice()),test1);assertEqB(s.until(test1.toSlice()),test3);assertEqB(s,test3);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 64
column: 4
content: functiontestFind(){bytesmemorytest0="abracadabra";bytesmemorytest1="bra";bytesmemorytest2="bracadabra";bytesmemorytest3="rab";bytesmemorytest4="12345";bytesmemorytest5="123456";bytesmemorytest6="5";bytesmemorytest7="";assertEqB(test0.toSlice().find(test0.toSlice()),test0);assertEqB(test0.toSlice().find(test1.toSlice()),test2);Assert.isTrue(test0.toSlice().find(test3.toSlice()).empty(),"Error Message");Assert.isTrue(test4.toSlice().find(test5.toSlice()).empty(),"Error Message");assertEqB(test4.toSlice().find(test7.toSlice()),test4);assertEqB(test4.toSlice().find(test6.toSlice()),test6);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 81
column: 4
content: functiontestRfind(){bytesmemorytest0="abracadabra";bytesmemorytest1="bra";bytesmemorytest2="cad";bytesmemorytest3="abracad";bytesmemorytest4="12345";bytesmemorytest5="123456";bytesmemorytest6="1";bytesmemorytest7="";assertEqB(test0.toSlice().rfind(test1.toSlice()),test0);assertEqB(test0.toSlice().rfind(test2.toSlice()),test3);Assert.isTrue(test4.toSlice().rfind(test5.toSlice()).empty(),"Error Message");assertEqB(test4.toSlice().rfind(test7.toSlice()),test4);assertEqB(test4.toSlice().rfind(test6.toSlice()),test6);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 97
column: 4
content: functiontestSplit(){vars="foo->bar->baz".toSlice();vardelim="->".toSlice();assertEq(s.split(delim),"foo");assertEq(s,"bar->baz");assertEq(s.split(delim),"bar");assertEq(s.split(delim),"baz");Assert.isTrue(s.empty(),"Error Message");assertEq(s.split(delim),"");assertEq(".".toSlice().split(".".toSlice()),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 110
column: 4
content: functiontestRsplit(){vars="foo->bar->baz".toSlice();vardelim="->".toSlice();assertEq(s.rsplit(delim),"baz");assertEq(s.rsplit(delim),"bar");assertEq(s.rsplit(delim),"foo");Assert.isTrue(s.empty(),"Error Message");assertEq(s.rsplit(delim),"");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 120
column: 4
content: functiontestCount(){Assert.equal("1121123211234321".toSlice().count("1".toSlice()),7,"Error Message");Assert.equal("ababababa".toSlice().count("aba".toSlice()),2,"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 125
column: 4
content: functiontestContains(){Assert.isTrue("foobar".toSlice().contains("f".toSlice()),"Error Message");Assert.isTrue("foobar".toSlice().contains("o".toSlice()),"Error Message");Assert.isTrue("foobar".toSlice().contains("r".toSlice()),"Error Message");Assert.isTrue("foobar".toSlice().contains("".toSlice()),"Error Message");Assert.isTrue("foobar".toSlice().contains("foobar".toSlice()),"Error Message");Assert.isFalse("foobar".toSlice().contains("s".toSlice()),"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 134
column: 4
content: functiontestConcat(){myassertEq("foo".toSlice().concat("bar".toSlice()),"foobar");myassertEq("".toSlice().concat("bar".toSlice()),"bar");myassertEq("foo".toSlice().concat("".toSlice()),"foo");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 140
column: 4
content: functiontestJoin(){varparts=newbytesutils.slice[](4);parts[0]="zero".toSlice();parts[1]="one".toSlice();parts[2]="".toSlice();parts[3]="two".toSlice();myassertEq(" ".toSlice().join(parts),"zero one  two");myassertEq("".toSlice().join(parts),"zeroonetwo");parts=newbytesutils.slice[](1);parts[0]="zero".toSlice();myassertEq(" ".toSlice().join(parts),"zero");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 155
column: 4
content: functiontestSha256(){vars="foo->bar->baz".toSlice();vardelim="->".toSlice();varx=s.split(delim);Assert.equal(x.slicesha256(),0x2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae,"Error Message");x=s.split(delim);Assert.equal(x.slicesha256(),0xfcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9,"Error Message");x="test".toSlice();Assert.equal(x.slicesha256(),0x9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08,"Error Message");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 167
column: 4
content: functiontestSliceOffset(){bytesmemorytest1="foo";bytesmemorytest2="foo";bytesmemorytest3="oo";bytesmemorytest4="foofoo";assertEqB(test1.toSlice(1),test3);Assert.isTrue(test1.toSlice(1).equals(test3.toSlice()),"Error Message");Assert.isTrue(test1.toSlice(1).equals(test2.toSlice(1)),"Error Message");Assert.isTrue(test4.toSlice(3).equals(test1.toSlice()),"Error Message");Assert.isFalse(test2.toSlice(1).equals(test2.toSlice(2)),"Error Message");myassertEq(test2.toSlice(1).toBytes(),test3);myassertEq(test4.toSlice(1).split("f".toSlice()).toBytes(),test3);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 182
column: 4
content: functiontestLong(){bytesmemoryproof='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';assertEqB(proof.toSlice(),proof);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 188
column: 4
content: functiontestTruncate(){bytesmemorytest1="foo";bytesmemorytest2="test123";bytesmemorytest3="test";bytesmemorytest4="foobar";bytesmemorytest5="test1";vars=test4.toSlice();s.truncate(3);assertEqB(s,test1);assertEqB(test2.toSlice().truncate(5),test5);varx=test2.toSlice();assertEqB(x.truncate(5),test5);assertEqB(x.truncate(4),test3);}

SOLIDITY_VISIBILITY :15
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_VAR :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_UPGRADE_TO_050 :2
SOLIDITY_GAS_LIMIT_IN_LOOPS :1
