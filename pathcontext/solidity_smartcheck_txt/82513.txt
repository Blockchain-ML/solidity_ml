F:\Blockchain\dataset_new_byID\82513.sol
jar:file:/C:/Users/hp/AppData/Roaming/npm/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 13
column: 27
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 22
column: 27
content: 0x2

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 31
column: 27
content: 0x3

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 54
column: 23
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 73
column: 47
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 76
column: 27
content: 0x2

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 97
column: 47
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 100
column: 27
content: 0x3

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 68
column: 4
content: for(i=0;i<results.length;i++){intervalID=results[i];(begin,end,data)=tree.getInterval(intervalID);if(!(begin==1&&end==9&&data==0x1)){Assert.equal(begin,4,"The other result should be (4,7,0x2)");Assert.equal(end,7,"The other result should be (4,7,0x2)");Assert.equal(data,0x2,"The other result should be (4,7,0x2)");}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 92
column: 4
content: for(i=0;i<results.length;i++){intervalID=results[i];(begin,end,data)=tree.getInterval(intervalID);if(!(begin==1&&end==9&&data==0x1)){Assert.equal(begin,3,"The other result should be (3,4,0x2)");Assert.equal(end,4,"The other result should be (3,4,0x2)");Assert.equal(data,0x3,"The other result should be (3,4,0x2)");}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 68
column: 4
content: for(i=0;i<results.length;i++){intervalID=results[i];(begin,end,data)=tree.getInterval(intervalID);if(!(begin==1&&end==9&&data==0x1)){Assert.equal(begin,4,"The other result should be (4,7,0x2)");Assert.equal(end,7,"The other result should be (4,7,0x2)");Assert.equal(data,0x2,"The other result should be (4,7,0x2)");}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 92
column: 4
content: for(i=0;i<results.length;i++){intervalID=results[i];(begin,end,data)=tree.getInterval(intervalID);if(!(begin==1&&end==9&&data==0x1)){Assert.equal(begin,3,"The other result should be (3,4,0x2)");Assert.equal(end,4,"The other result should be (3,4,0x2)");Assert.equal(data,0x3,"The other result should be (3,4,0x2)");}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 12
column: 2
content: functiontest0_firstInterval(){tree.addInterval(1,9,0x1);Assert.equal(tree.numIntervals,1,"There should be 1 interval");Assert.equal(tree.search(5).length,1,"Point search should find 1 interval");Assert.equal(tree.search(0).length,0,"Strictly below interval should find 0 intervals");Assert.equal(tree.search(9).length,0,"Upper boundary exact match should find 0 intervals");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 21
column: 2
content: functiontest1_overlappingIntervalSameNode(){tree.addInterval(4,7,0x2);Assert.equal(tree.numIntervals,2,"There should be 2 intervals");Assert.equal(tree.search(5).length,2,"Common point should have both intervals");Assert.equal(tree.search(3).length,1,"Non-overlapped point should only have first interval");Assert.equal(tree.search(7).length,1,"Upper-bound on only 1 should find 1 match");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 30
column: 2
content: functiontest2_verlappingIntervalNewNode(){tree.addInterval(3,4,0x3);Assert.equal(tree.numIntervals,3,"There should be 3 intervals");Assert.equal(tree.search(5).length,2,"Point not in new should find only 2 prior");Assert.equal(tree.search(3).length,2,"Common point should find 2 intervals");Assert.equal(tree.search(4).length,2,"Upper-bound on only 2 should find 1 match");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 39
column: 2
content: functiontest3_search(){uint[]memoryresults;uintintervalID;uintbegin;uintend;bytes32data;results=tree.search(1);Assert.equal(results.length,1,"There should only be 1 search result");intervalID=results[0];(begin,end,data)=tree.getInterval(intervalID);Assert.equal(begin,1,"Returned interval should begin at 1");Assert.equal(end,9,"Returned interval should end at 9");Assert.equal(data,0x1,"Returned interval should have matching data");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 57
column: 2
content: functiontest4_searchSameNode(){uint[]memoryresults;uintintervalID;uintbegin;uintend;bytes32data;uinti;results=tree.search(4);Assert.equal(results.length,2,"There should be two results");for(i=0;i<results.length;i++){intervalID=results[i];(begin,end,data)=tree.getInterval(intervalID);if(!(begin==1&&end==9&&data==0x1)){Assert.equal(begin,4,"The other result should be (4,7,0x2)");Assert.equal(end,7,"The other result should be (4,7,0x2)");Assert.equal(data,0x2,"The other result should be (4,7,0x2)");}}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 81
column: 2
content: functiontest5_searchAcrossNodes(){uint[]memoryresults;uintintervalID;uintbegin;uintend;bytes32data;uinti;results=tree.search(3);Assert.equal(results.length,2,"There should be two results");for(i=0;i<results.length;i++){intervalID=results[i];(begin,end,data)=tree.getInterval(intervalID);if(!(begin==1&&end==9&&data==0x1)){Assert.equal(begin,3,"The other result should be (3,4,0x2)");Assert.equal(end,4,"The other result should be (3,4,0x2)");Assert.equal(data,0x3,"The other result should be (3,4,0x2)");}}}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 10
column: 2
content: TreeLib.Treetree;

SOLIDITY_VISIBILITY :7
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_ADDRESS_HARDCODED :8
SOLIDITY_GAS_LIMIT_IN_LOOPS :2
